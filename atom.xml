<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YSocket&#39;s Blog</title>
  
  <subtitle>YSocket&#39;s Blog</subtitle>
  <link href="http://ysocket-blog.pages.dev/atom.xml" rel="self"/>
  
  <link href="http://ysocket-blog.pages.dev/"/>
  <updated>2025-02-20T01:14:55.826Z</updated>
  <id>http://ysocket-blog.pages.dev/</id>
  
  <author>
    <name>YSocket</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试页</title>
    <link href="http://ysocket-blog.pages.dev/2025/02/20/test-page/"/>
    <id>http://ysocket-blog.pages.dev/2025/02/20/test-page/</id>
    <published>2025-02-20T01:12:56.000Z</published>
    <updated>2025-02-20T01:14:55.826Z</updated>
    
    <content type="html"><![CDATA[<p>测试页面</p><h5 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h5><ul><li>型号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java code<br><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><blockquote><p>引用行</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试页面&lt;/p&gt;
&lt;h5 id=&quot;标题4&quot;&gt;&lt;a href=&quot;#标题4&quot; class=&quot;headerlink&quot; title=&quot;标题4&quot;&gt;&lt;/a&gt;标题4&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;型号&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;ta</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>@FeignClient导致 RequestParam.value() was empty</title>
    <link href="http://ysocket-blog.pages.dev/2023/12/12/FeignClient-RequestParam-value-was-empty/"/>
    <id>http://ysocket-blog.pages.dev/2023/12/12/FeignClient-RequestParam-value-was-empty/</id>
    <published>2023-12-12T08:13:00.000Z</published>
    <updated>2024-01-30T13:22:47.023Z</updated>
    
    <content type="html"><![CDATA[<h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>最近在使用 @RequestParam、@RequestBody 注解定义 feign 接口的时候出现一些使用上的问题，造成调用方启动的时候会报错</p><h5 id="详细情况"><a href="#详细情况" class="headerlink" title="详细情况"></a>详细情况</h5><p>1.第一种情况，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/hello2&quot;)</span><br>BetaDto <span class="hljs-title function_">hello2</span><span class="hljs-params">(String name1)</span>;<br></code></pre></td></tr></table></figure><p>接口有且只有一个 key&#x2F;value 参数，此时可以不必在 name1 参数上使用 @RequestParam 注解。通过 Feign 调用该接口的调用方可以正常启动。</p><p>2.第二种情况，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/hello2&quot;)</span><br>BetaDto <span class="hljs-title function_">hello2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String name1)</span>;<br></code></pre></td></tr></table></figure><p>接口有且只有一个 key&#x2F;value 参数，此时如果对 name1 参数上使用 @RequestParam 注解，此时通过 Feign 调用该接口的调用方可启动的时候回抛出如下错误：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Caused <span class="hljs-keyword">by</span>: java.lang.IllegalStateException: RequestParam.<span class="hljs-built_in">value</span>() was <span class="hljs-literal">empty</span> <span class="hljs-keyword">on</span> <span class="hljs-title">parameter</span> <span class="hljs-title">0</span><br></code></pre></td></tr></table></figure><p>意思是 @RequestParam 的 value 值不允许为空，正确的姿势如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/hello2&quot;)</span><br>BetaDto <span class="hljs-title function_">hello2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name1&quot;)</span> String name1)</span>;<br></code></pre></td></tr></table></figure><p>3.第三种情况，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/hello2&quot;)</span><br>BetaDto <span class="hljs-title function_">hello2</span><span class="hljs-params">(String name1, String name2)</span>;<br></code></pre></td></tr></table></figure><p>接口存在多个 key&#x2F;value 参数，此时通过 Feign 调用该接口的调用方启动的时候会抛出如下错误：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Caused <span class="hljs-keyword">by</span>: java.lang.IllegalStateException: <span class="hljs-keyword">Method</span> <span class="hljs-title function_">has</span> <span class="hljs-title function_">too</span> <span class="hljs-title function_">many</span> <span class="hljs-title function_">Body</span> <span class="hljs-title function_">parameters</span><br></code></pre></td></tr></table></figure><p>像这种多参数（key&#x2F;value）的情况必须为每个参数增加 @RequestParam 注解，正确的姿势如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/hello2&quot;)</span><br>BetaDto <span class="hljs-title function_">hello2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(“name1”)</span>  String name1, <span class="hljs-meta">@RequestParam(“name2”)</span>  String name2)</span>;<br></code></pre></td></tr></table></figure><h5 id="终极办法："><a href="#终极办法：" class="headerlink" title="终极办法："></a>终极办法：</h5><p>在pom.xml的maven-compiler-plugin插件中添加配置parameters</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">parameters</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">parameters</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Spring框架<br>SpringBoot项目如果继承自spring-boot-starter-parent，会默认开启。</p><p><img src="/images/pasted-27.png" alt="upload successful"></p><p>来自：<a href="https://blog.csdn.net/yangchao1125/article/details/104356936">Feign 中使用 @RequestParam、@RequestBody 的正确姿势</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h5&gt;&lt;p&gt;最近在使用 @RequestParam、@RequestBody 注解定义 feign 接口的时候出现一些使用上的问题，造成调用方启动的时候</summary>
      
    
    
    
    <category term="feign" scheme="http://ysocket-blog.pages.dev/categories/feign/"/>
    
    
    <category term="spring cloud" scheme="http://ysocket-blog.pages.dev/tags/spring-cloud/"/>
    
    <category term="feign" scheme="http://ysocket-blog.pages.dev/tags/feign/"/>
    
  </entry>
  
  <entry>
    <title>关于A method overriding another method must not redefine the parameter constraint configuration解决方法</title>
    <link href="http://ysocket-blog.pages.dev/2023/11/11/A-method-overriding-another-method-must-not-redefine-the-parameter-constraint-configuration/"/>
    <id>http://ysocket-blog.pages.dev/2023/11/11/A-method-overriding-another-method-must-not-redefine-the-parameter-constraint-configuration/</id>
    <published>2023-11-11T07:53:00.000Z</published>
    <updated>2024-01-30T13:22:47.022Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于A-method-overriding-another-method-must-not-redefine-the-parameter-constraint-configuration解决方法"><a href="#关于A-method-overriding-another-method-must-not-redefine-the-parameter-constraint-configuration解决方法" class="headerlink" title="关于A method overriding another method must not redefine the parameter constraint configuration解决方法"></a>关于A method overriding another method must not redefine the parameter constraint configuration解决方法</h4><ul><li>使用的@Validated校验参数接口参数和实现类参数要保持一直，不然会报错。</li><li>接口:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;enroll&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EduBatchApi</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取招生批次详细信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 主键</span><br><span class="hljs-comment">     */</span><br>    R&lt;EduBatchVo&gt; <span class="hljs-title function_">getInfo</span><span class="hljs-params">(<span class="hljs-meta">@NotNull(message = &quot;主键不能为空&quot;)</span> <span class="hljs-meta">@PathVariable</span> String id)</span>;<br></code></pre></td></tr></table></figure><ul><li>实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduBatchController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EduBatchApi</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IEduBatchService iEduBatchService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取招生批次详细信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;EduBatchVo&gt; <span class="hljs-title function_">getInfo</span><span class="hljs-params">(<span class="hljs-meta">@NotNull(message = &quot;主键不能为空&quot;)</span> <span class="hljs-meta">@PathVariable</span> String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> R.success(iEduBatchService.queryById(id));<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;关于A-method-overriding-another-method-must-not-redefine-the-parameter-constraint-configuration解决方法&quot;&gt;&lt;a href=&quot;#关于A-method-overriding-a</summary>
      
    
    
    
    <category term="spring cloud" scheme="http://ysocket-blog.pages.dev/categories/spring-cloud/"/>
    
    
    <category term="spring cloud" scheme="http://ysocket-blog.pages.dev/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title> Spring Boot 整合 RabbitMQ</title>
    <link href="http://ysocket-blog.pages.dev/2023/09/13/springboot-rabbitmq-01/"/>
    <id>http://ysocket-blog.pages.dev/2023/09/13/springboot-rabbitmq-01/</id>
    <published>2023-09-13T08:19:00.000Z</published>
    <updated>2023-10-05T14:33:05.723Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>RabbitMQ 是一个消息队列，说到消息队列，大家可能多多少少有听过，它主要的功能是用来实现应用服务的异步与解耦，同时也能起到削峰填谷、消息分发的作用。<br>消息队列在比较主要的一个作用是用来做应用服务的解耦，消息从消息的生产者传递到消息队列，消费者从消息队列中获取消息并进行消费，生产者不需要管是谁在消费消息，消费者也无需关注消息是由谁来生产的。在分布式的系统中，消息队列也会被用在其他地方，比如分布式事务的支持，代表如阿里开源的 RocketMQ 。<br>当然，我们本篇文章的主角还是 RabbitMQ 。</p><p>原文链接： <a href="https://juejin.cn/post/6844903966531125262">Spring Boot 整合 RabbitMQ</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h4&gt;&lt;p&gt;RabbitMQ 是一个消息队列，说到消息队列，大家可能多多少少有听过，它主要的功能是用来实现应用服务的异步与解耦，同时</summary>
      
    
    
    
    <category term="springboot rabbitmq" scheme="http://ysocket-blog.pages.dev/categories/springboot-rabbitmq/"/>
    
    
    <category term="rabbitmq" scheme="http://ysocket-blog.pages.dev/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>理解 RabbitMQ Exchange</title>
    <link href="http://ysocket-blog.pages.dev/2023/09/12/know-rabbitmq-exchange/"/>
    <id>http://ysocket-blog.pages.dev/2023/09/12/know-rabbitmq-exchange/</id>
    <published>2023-09-12T09:28:37.000Z</published>
    <updated>2023-10-05T14:33:05.722Z</updated>
    
    <content type="html"><![CDATA[<h4 id="理解-RabbitMQ-Exchange"><a href="#理解-RabbitMQ-Exchange" class="headerlink" title="理解 RabbitMQ Exchange"></a>理解 RabbitMQ Exchange</h4><p>原文链接：</p><p><a href="https://zhuanlan.zhihu.com/p/37198933">理解 RabbitMQ Exchange</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;理解-RabbitMQ-Exchange&quot;&gt;&lt;a href=&quot;#理解-RabbitMQ-Exchange&quot; class=&quot;headerlink&quot; title=&quot;理解 RabbitMQ Exchange&quot;&gt;&lt;/a&gt;理解 RabbitMQ Exchange&lt;/h4&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>spring cloud config本地配置覆盖远程配置属性</title>
    <link href="http://ysocket-blog.pages.dev/2023/09/12/spring-config-override/"/>
    <id>http://ysocket-blog.pages.dev/2023/09/12/spring-config-override/</id>
    <published>2023-09-12T07:42:00.000Z</published>
    <updated>2023-10-16T12:42:14.297Z</updated>
    
    <content type="html"><![CDATA[<p>引用spring cloud config时，Spring cloud默认以远程配置为最高优先级，如果希望本地的配置文件（如application.yml或bootstrap.yml）的某些属性能覆盖远程的同名属性值，则需要在远程配置文件增加以下属性配置（以下所述属性均在PropertySourceBootstrapProperties）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">overrideNone:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>该配置的含义是远程配置不覆盖本地配置（双重否定？太有才了）</p><p>true表示远程配置不覆盖本地同名属性</p><p>false表示远程配置覆盖本地同名属性 默认为false,（远程配置同名属性覆盖本地配置同名属性）</p><p>注意：<strong>该属性参数值需要配置在远程配置文件中</strong>，配置在本地配置文件不生效（如application.yml或bootstrap.yml）</p><p>该设置为true，则外部属性（指远程配置）具有最低的优先级，不覆盖任何本地已经存在的属性配置值。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">allowOverride:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>该配置的含义是远程配置是否允许被本地属性覆盖 默认true, <strong>该属性必须配置在远程配置</strong>（在本地配置该属性是不能生效的），<strong>该参数默认为true不需要特别设置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">overrideSystemProperties:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>该配置的含义是远程是否覆盖系统配置 默认true, <strong>该属性必须配置在远程配置中</strong>（在本地配置该属性是不能生效的）。例如，如果希望在启动时可能通过环境变量或程序参数修改某个配置，需要将该属性在远程配置中设置为false。</p><p>例：系统配置指通过命令行参数或环境变量方式 指定配置属性值.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java –jar xxx.jar --spring.cloud.stream.bindings. BusInput.group= collector-local<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;引用spring cloud config时，Spring cloud默认以远程配置为最高优先级，如果希望本地的配置文件（如application.yml或bootstrap.yml）的某些属性能覆盖远程的同名属性值，则需要在远程配置文件增加以下属性配置（以下所述属性均在P</summary>
      
    
    
    
    <category term="spring cloud config" scheme="http://ysocket-blog.pages.dev/categories/spring-cloud-config/"/>
    
    
    <category term="spring cloud" scheme="http://ysocket-blog.pages.dev/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot中@ConditionalOnProperty使用详解</title>
    <link href="http://ysocket-blog.pages.dev/2023/09/09/springboot-ConditionalOnProperty-detail/"/>
    <id>http://ysocket-blog.pages.dev/2023/09/09/springboot-ConditionalOnProperty-detail/</id>
    <published>2023-09-09T02:02:00.000Z</published>
    <updated>2023-09-19T11:27:40.871Z</updated>
    
    <content type="html"><![CDATA[<p>在Spring Boot的自动配置中经常看到@ConditionalOnProperty注解的使用，本篇文章带大家来了解一下该注解的功能。</p><h4 id="Spring-Boot中的使用"><a href="#Spring-Boot中的使用" class="headerlink" title="Spring Boot中的使用"></a>Spring Boot中的使用</h4><p>在Spring Boot的源码中，比如涉及到Http编码的自动配置、数据源类型的自动配置等大量的使用到了@ConditionalOnProperty的注解。</p><p>HttpEncodingAutoConfiguration类中部分源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@EnableConfigurationProperties(HttpProperties.class)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpEncodingAutoConfiguration</span> &#123;<br>    <span class="hljs-comment">// 省略内部代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>DataSourceConfiguration类中部分代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(DataSource.class)</span><br><span class="hljs-meta">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;, havingValue = &quot;org.apache.tomcat.jdbc.pool.DataSource&quot;,</span><br><span class="hljs-meta">        matchIfMissing = true)</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tomcat</span> &#123;<br>  <span class="hljs-comment">// 省略内部代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>很显然，以上两个自动配置类中都通过@ConditionalOnProperty来控制自动配置是否生效，下面我们来了解一下它的源码和具体使用。</p><h4 id="ConditionalOnProperty源码说明"><a href="#ConditionalOnProperty源码说明" class="headerlink" title="@ConditionalOnProperty源码说明"></a>@ConditionalOnProperty源码说明</h4><p>@ConditionalOnProperty注解类源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Conditional(OnPropertyCondition.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ConditionalOnProperty &#123;<br><br>    <span class="hljs-comment">// 数组，获取对应property名称的值，与name不可同时使用</span><br>    String[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">// 配置属性名称的前缀，比如spring.http.encoding</span><br>    String <span class="hljs-title function_">prefix</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">// 数组，配置属性完整名称或部分名称</span><br>    <span class="hljs-comment">// 可与prefix组合使用，组成完整的配置属性名称，与value不可同时使用</span><br>    String[] name() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">// 可与name组合使用，比较获取到的属性值与havingValue给定的值是否相同，相同才加载配置</span><br>    String <span class="hljs-title function_">havingValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">// 缺少该配置属性时是否可以加载。如果为true，没有该配置属性时也会正常加载；反之则不会生效</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">matchIfMissing</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过注解ConditionalOnProperty上的@Conditional(OnPropertyCondition.class)代码，可以看出ConditionalOnProperty属于@Conditional的衍生注解。生效条件由OnPropertyCondition来进行判断。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>关于@ConditionalOnProperty的使用方法，我们在上面的Spring Boot中的使用已经看到。</p><p>@ConditionalOnProperty的核心功能是通过属性name以及havingValue来实现的。</p><p>首先看matchIfMissing属性，用来指定如果配置文件中未进行对应属性配置时的默认处理：默认情况下matchIfMissing为false，也就是说如果未进行属性配置，则自动配置不生效。如果matchIfMissing为true，则表示如果没有对应的属性配置，则自动配置默认生效。</p><p>下面看name属性，name用来从application.properties中读取某个属性值。比如上面Tomcat的自动配置在配置文件为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource</span><br></code></pre></td></tr></table></figure><p>在matchIfMissing为false时，如果name值为空，则返回false；如果name不为空，则将该值与havingValue指定的值进行比较，如果一样则返回true，否则返回false。返回false也就意味着自动配置不会生效。</p><p>但是如果看HttpEncodingAutoConfiguration类上的属性配置发现并没有完全按照上面所说的name和havingValue配合使用。它是通过“prefix+value”作为属性的名称来进行配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">spring.http.encoding.enabled=true</span><br></code></pre></td></tr></table></figure><p>其中prefix指定了配置的统一前缀“spring.http.encoding”，而value指定了具体的属性名称为“enabled”。这里并没有设置havingValue的值，如果havingValue未指定值，默认情况下在属性配置中设置的值为true则生效（如上配置），false则不生效。</p><p>原文链接：《<a href="https://segmentfault.com/a/1190000021236948">SPRING BOOT中@CONDITIONALONPROPERTY使用详解</a>》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Spring Boot的自动配置中经常看到@ConditionalOnProperty注解的使用，本篇文章带大家来了解一下该注解的功能。&lt;/p&gt;
&lt;h4 id=&quot;Spring-Boot中的使用&quot;&gt;&lt;a href=&quot;#Spring-Boot中的使用&quot; class=&quot;head</summary>
      
    
    
    
    <category term="spring boot" scheme="http://ysocket-blog.pages.dev/categories/spring-boot/"/>
    
    
    <category term="spring boot" scheme="http://ysocket-blog.pages.dev/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus updateById 不更新null字段</title>
    <link href="http://ysocket-blog.pages.dev/2023/09/02/mybatis-plus-null-field-not-be-update/"/>
    <id>http://ysocket-blog.pages.dev/2023/09/02/mybatis-plus-null-field-not-be-update/</id>
    <published>2023-09-02T07:22:00.000Z</published>
    <updated>2023-09-19T11:27:40.870Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h4><p>使用这两个方法，不会对实体中值为Null的属性（字段）进行更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.updateById(entity);<br> <br><span class="hljs-built_in">this</span>.update(entity, updateWrapper);<br></code></pre></td></tr></table></figure><h4 id="二、问题原因"><a href="#二、问题原因" class="headerlink" title="二、问题原因"></a>二、问题原因</h4><p>原因：mybatis-plus的fieldStrategy的策略有三种，分别是IGNORED-0-忽略，NOT_NULL-1-非NULL（默认策略），NOT_EMPTY-2-非空，所以造成不更新的原因是默认策略。</p><h4 id="三、解决办法"><a href="#三、解决办法" class="headerlink" title="三、解决办法"></a>三、解决办法</h4><ul><li>设置全局的 updateStrategy</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">dbConfig:</span><br>      <span class="hljs-attr">insertStrategy:</span> <span class="hljs-string">NOT_NULL</span><br>      <span class="hljs-attr">updateStrategy:</span> <span class="hljs-string">IGNORED</span><br>      <span class="hljs-attr">where-strategy:</span> <span class="hljs-string">NOT_NULL</span><br></code></pre></td></tr></table></figure><ul><li>对字段单独设置策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(updateStrategy= FieldStrategy.IGNORED)</span><br></code></pre></td></tr></table></figure><ul><li>使用mapper的update</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">LambdaUpdateWrapper&lt;xxx&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateWrapper</span>&lt;&gt;();<br>wrapper.eq(xxx::getId, xxx.getId());<br>wrapper.set(xxx::getOrgUri, xxx.getOrgUri());<br>wrapper.set(xxx::getBeginTime, <span class="hljs-literal">null</span>);<br>xxxMapper.update(xxx, wrapper);<br></code></pre></td></tr></table></figure><ul><li>使用LambdaUpdateWrapper（推荐）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">LambdaUpdateWrapper&lt;BizFile&gt; lambdaUpdateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//过滤条件</span><br>lambdaUpdateWrapper.eq(BizFile::getId, bizFile.getId());<br> <br><span class="hljs-comment">//下面为设置值          </span><br><span class="hljs-comment">//由于parentId会为空，所以要使用LambdaUpdateWrapper</span><br>lambdaUpdateWrapper.set(BizFile::getParentId, parentId);<br>lambdaUpdateWrapper.set(BizFile::getPath, newDirPath);<br> <br><span class="hljs-comment">//更新</span><br><span class="hljs-built_in">this</span>.update(lambdaUpdateWrapper);<br></code></pre></td></tr></table></figure><p>第1种就免了，第2、3种验证过都可以。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h4&gt;&lt;p&gt;使用这两个方法，不会对实体中值为Null的属性（字段）进行更新。&lt;/p&gt;
&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="mybatis" scheme="http://ysocket-blog.pages.dev/categories/mybatis/"/>
    
    
    <category term="mybatis" scheme="http://ysocket-blog.pages.dev/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>springboot核心基础之spring.factories机制</title>
    <link href="http://ysocket-blog.pages.dev/2023/08/23/spring-factories/"/>
    <id>http://ysocket-blog.pages.dev/2023/08/23/spring-factories/</id>
    <published>2023-08-23T02:33:33.000Z</published>
    <updated>2023-08-24T13:16:16.643Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>在java spring cloud项目中，我们常常会在子模块中创建公共方法，那么在另外一个子模块中，需要加载配置文件的时候，往往Spring Boot 自动扫描包的时候，只会扫描自己模块下的类。这个是springboot约定俗成的内容。</p><h4 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h4><p>如果想要被Spring容器管理的Bean的路径不再Spring Boot 的包扫描路径下，怎么办呢？也就是如何去加载第三方的Bean 呢？</p><p>目前较通用的方式有2种，一是使用注解进行实例化，而是使用spring.factories机制。</p><p>这里我们使用Swagger的配置来做实验。</p><p>　首先一个Swagger的配置类：SwaggerConfig，工程结构如下：</p><p><img src="/images/pasted-23.png" alt="upload successful"></p><p>发现我的SwaggerConfig 类和 SpringBoot 的启动类ConfigApplication.java 不在同一级目录下，按照springboot启动机制，以当Spring Boot 自动扫描包的时候，是扫描不到我的SwaggerConfig 的配置的，也就在控制台没有Swagger的打印的信息：</p><p><img src="/images/pasted-24.png" alt="upload successful"></p><p>所以这时候我如果想要把SwaggerConfig 加载到Spring容器中的话 要怎么办呢？下面介绍上面提到的2种方式:</p><h5 id="方法解决"><a href="#方法解决" class="headerlink" title="方法解决"></a>方法解决</h5><ul><li>方法一：在Spring Boot Application 主类上使用@Import注解。</li></ul><p><img src="/images/pasted-25.png" alt="upload successful"></p><ul><li>方法二：创建spring.factories文件<br>现在我们将其改造一下，采用spring.factories 的方式去加载SwaggerConfig类，在resources目录下新建一个META-INF 的目录，然后在</li></ul><p>新建一个spring.factories 的文件，里面的内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"># Auto Configure<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>com.sg.config.Swagger2Config<br></code></pre></td></tr></table></figure><p>然后在把Spring Boot 启动类上的@Import注释掉，启动发现也可以把SwaggerConfig加载到Spring 容器中。</p><p>到这就完成了加载一个Spring 不能扫描到的一个类，他可以是第三方的，也可以是自己写的，只要是Spring Boot 默认扫描路径不能够扫描到，都可以使用这种方式去加载。</p><h4 id="内部原理机制"><a href="#内部原理机制" class="headerlink" title="内部原理机制"></a>内部原理机制</h4><p>Spring.Factories这种机制实际上是仿照java中的SPI扩展机制实现的。</p><h4 id="什么是SPI-机制"><a href="#什么是SPI-机制" class="headerlink" title="什么是SPI 机制"></a>什么是SPI 机制</h4><p>SPI 的全名为 Service Provider Interface.这个是是针对厂商或者插件的。在java.util.ServiceLoader 的文档里有比较详细的介绍。</p><p>简单总结下Java SPI机制的思想。我们系统里抽象的各个模块，往往有很多不同的实现方案，比如 日志模块的方案，xml解析模块、jdbc模块的方案等。面向的对象设计里，我们一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及了具体的实现类，就违反了可插拔的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。</p><p>Java SPI 就是提供这样的一种机制：为某个接口寻找服务的实现的机制，有点类似IOC的思想，就是将装配的控制权移到程序之外，在模块化设计中这个机制很重要。</p><h4 id="Spring-Boot-中的SPI-机制"><a href="#Spring-Boot-中的SPI-机制" class="headerlink" title="Spring Boot 中的SPI 机制"></a>Spring Boot 中的SPI 机制</h4><p>在Spring boot 中也有一种类似的加载机制，它在<br>META-INFO&#x2F;spring.factories文件中配置接口的实现类名称，然后在程序中读取这些配置文件并实例化。</p><p>这种自定义的SPI 机制就是Spring Boot Starter 实现的基础。</p><h4 id="Spring-Factories实现原理"><a href="#Spring-Factories实现原理" class="headerlink" title="Spring Factories实现原理"></a>Spring Factories实现原理</h4><p>spring -core 包里定义了SpringFactoriesLoader 类，这个类实现了检索META-INF&#x2F;spring.factories文件，并获取指定接口的配置的功能。在这个类中定义了两个对外的方法：</p><p>loadFactories 根据接口类获取其实现类的实例，这个方法返回的是对象列表<br>loadFactoryNames 根据接口获取其接口类的名称，这个方法返回的是类名的列表。<br>上面两个方法的关键都是从指定的ClassLoader中获取spring.factories文件，并解析得到类名列表，具体代码如下：</p><p><img src="/images/pasted-26.png" alt="upload successful"><br>从代码中可以看到，在这个方法中会遍历整个ClassLoader 中所有Jar包下的spring.factories文件，也就是我们可以在自己jar中配置spring.factories文件，不会影响到其他地方的配置，也不回被别人的配置覆盖。</p><p>spring.factories的是通过Properties解析得到的，所以我们在写文件中的内容都是按照下面这种方式配置的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"># Auto Configure<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>com.sg.config.Swagger2Config<br></code></pre></td></tr></table></figure><p>如果一个接口希望配置多个实现类，可以用”,”分割。</p><h4 id="spring-boot包中的spring-factories文件"><a href="#spring-boot包中的spring-factories文件" class="headerlink" title="spring-boot包中的spring.factories文件"></a>spring-boot包中的spring.factories文件</h4><p>spring-boot包中的spring.factories文件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># PropertySource Loaders</span><br><span class="hljs-keyword">org.springframework.boot.env.PropertySourceLoader=\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.env.PropertiesPropertySourceLoader,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.env.YamlPropertySourceLoader</span><br><span class="hljs-keyword"></span><br><br><span class="hljs-comment"># Run Listeners</span><br><span class="hljs-keyword">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.event.EventPublishingRunListener</span><br><span class="hljs-keyword"></span><br><br><span class="hljs-comment"># Error Reporters</span><br><span class="hljs-keyword">org.springframework.boot.SpringBootExceptionReporter=\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.FailureAnalyzers</span><br><span class="hljs-keyword"></span><br><br><span class="hljs-comment"># Application Context Initializers</span><br><span class="hljs-keyword">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span><br><span class="hljs-keyword"></span><br><br><span class="hljs-comment"># Application Listeners</span><br><span class="hljs-keyword">org.springframework.context.ApplicationListener=\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><br><span class="hljs-keyword"></span><br><br><span class="hljs-comment"># Environment Post Processors</span><br><span class="hljs-keyword">org.springframework.boot.env.EnvironmentPostProcessor=\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor</span><br><span class="hljs-keyword"></span><br><br><span class="hljs-comment"># Failure Analyzers</span><br><span class="hljs-keyword">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.UnboundConfigurationPropertyFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyNameFailureAnalyzer,\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzer</span><br><span class="hljs-keyword"></span><br><br><span class="hljs-comment"># FailureAnalysisReporters</span><br><span class="hljs-keyword">org.springframework.boot.diagnostics.FailureAnalysisReporter=\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter</span><br></code></pre></td></tr></table></figure><p>在日常工作中，我们可能需要实现一些SDK 或者Sring boot starter 给别人用的时候，我们就可以使用Factories机制，Factories机制可以让SDK或者Stater的使用只需要很少或者不需要进行配置，只需要在服务中引入我们的Jar包就即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;在java spring cloud项目中，我们常常会在子模块中创建公共方法，那么在另外一个子模块中，需要加载配置文件的时候，往往Sprin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>idea使用技巧之检查未使用的类、变量、方法</title>
    <link href="http://ysocket-blog.pages.dev/2023/08/04/find-unused-by-idea/"/>
    <id>http://ysocket-blog.pages.dev/2023/08/04/find-unused-by-idea/</id>
    <published>2023-08-04T02:47:38.000Z</published>
    <updated>2023-08-24T13:16:16.642Z</updated>
    
    <content type="html"><![CDATA[<p> 来源：<a href="https://www.cnblogs.com/chuzijing/p/14591220.html">https://www.cnblogs.com/chuzijing/p/14591220.html</a></p><ul><li>选择Analyze——》Run Inspection by Name…或者使用快捷键Ctrl+Alt+Shift+I</li></ul><p><img src="/images/pasted-17.png" alt="upload successful"></p><ul><li>在弹框中输入：unused declaration</li></ul><p><img src="/images/pasted-18.png" alt="upload successful"></p><ul><li>弹框默认选择</li></ul><p><img src="/images/pasted-19.png" alt="upload successful"></p><ul><li>等待下方读条结束会自动弹出Inspection Results弹窗</li></ul><p><img src="/images/pasted-20.png" alt="upload successful"></p><ul><li>对没有用到的方法和变量提供了四种处理方法</li></ul><p><img src="/images/pasted-21.png" alt="upload successful"></p><p>四种处理方式</p><p>　　* Safe delete：删除；</p><p>　　* Comment out：注释掉；</p><p>　　* Add as Entry Point：添加为入口点；</p><p>　　* Suppress：添加注解@SuppressWarnings(“unused”)或@SuppressWarnings(“ALL”)；</p><p><img src="/images/pasted-22.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 来源：&lt;a href=&quot;https://www.cnblogs.com/chuzijing/p/14591220.html&quot;&gt;https://www.cnblogs.com/chuzijing/p/14591220.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择Anal</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>无需额外注解的 SpringBoot API文档生成工具</title>
    <link href="http://ysocket-blog.pages.dev/2023/07/31/JApiDocs/"/>
    <id>http://ysocket-blog.pages.dev/2023/07/31/JApiDocs/</id>
    <published>2023-07-31T00:35:23.000Z</published>
    <updated>2023-08-02T14:21:53.774Z</updated>
    
    <content type="html"><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>编写和维护API文档这个事情，对于后端程序员来说，是一件恼人但又不得不做的事情，我们都不喜欢写文档，但除非项目前后端代码都是自己写的，否则API文档将是前后端协作中一个不可或缺的沟通界面。</p><p>JApiDocs是一个无需额外注解、开箱即用的SpringBoot接口文档生成工具。</p><p>无图无真相，生成文档的效果如下：</p><p><img src="/images/pasted-15.png" alt="JApiDocs"></p><p>相比Swagger要写一堆注解，Spring Rest Docs需要写测试用例，才能生成API文档，JApiDocs 具有无痛集成的特点。</p><h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><p>要使得JApiDcos正确工作，你写的代码应该是像下面的样子的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/user/&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> listForm</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(path = &quot;list&quot;, method = &#123;RequestMethod.GET,  RequestMethod.POST&#125;  )</span><br>    <span class="hljs-keyword">public</span> ApiResult&lt;PageResult&lt;UserVO&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(UserListForm listForm)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userForm</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(path = &quot;save&quot;)</span><br>    <span class="hljs-keyword">public</span> ApiResult&lt;UserVO&gt; <span class="hljs-title function_">saveUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserForm userForm)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们给Controller类和方法加上必要的注释，给接口方法返回相关的对象类型。是的，这样JApiDocs就能解析到相关的接口信息了，就跟我们平时写的代码是差不多的，但要注意，你要通过@param来告诉JApiDocs接口的参数，但在IDE的帮助下，这个工作将是轻松愉悦的：</p><p><img src="/images/pasted-16.png" alt="upload successful"></p><p>然后你在任意一个main入口方法执行下面的代码就可以生成文档了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DocsConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DocsConfig</span>();<br>config.setProjectPath(<span class="hljs-string">&quot;your springboot project path&quot;</span>); <span class="hljs-comment">// 项目根目录</span><br>config.setProjectName(<span class="hljs-string">&quot;ProjectName&quot;</span>); <span class="hljs-comment">// 项目名称</span><br>config.setApiVersion(<span class="hljs-string">&quot;V1.0&quot;</span>);       <span class="hljs-comment">// 声明该API的版本</span><br>config.setDocsPath(<span class="hljs-string">&quot;your api docs path&quot;</span>); <span class="hljs-comment">// 生成API 文档所在目录</span><br>config.setAutoGenerate(Boolean.TRUE);  <span class="hljs-comment">// 配置自动生成</span><br>Docs.buildHtmlDocs(config); <span class="hljs-comment">// 执行生成文档</span><br><br></code></pre></td></tr></table></figure><h4 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h4><p><a href="https://github.com/YeDaxia/JApiDocs">github仓库</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h5&gt;&lt;p&gt;编写和维护API文档这个事情，对于后端程序员来说，是一件恼人但又不得不做的事情，我们都不喜欢写文档，但除非项目前后端代码都是自己写的，否则A</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OpenAPI 文档 (Swagger)</title>
    <link href="http://ysocket-blog.pages.dev/2023/07/26/OpenApi-swaager/"/>
    <id>http://ysocket-blog.pages.dev/2023/07/26/OpenApi-swaager/</id>
    <published>2023-07-26T07:30:07.000Z</published>
    <updated>2023-08-02T14:21:53.774Z</updated>
    
    <content type="html"><![CDATA[<p>文章来源： <a href="http://ballcat.cn/guide/feature/openapi.html">http://ballcat.cn/guide/feature/openapi.html</a></p><h3 id="什么是-OpenAPI"><a href="#什么是-OpenAPI" class="headerlink" title="什么是 OpenAPI"></a>什么是 OpenAPI</h3><p>首先 OpenAPI 其实就是 Swagger, Swagger 规范于 2015 年 更名为 OpenAPI 规范，简称 OAS.</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><blockquote><p>由于 springfox 社区已经超过一年半的时间没有进行更新维护了，所以推荐大家使用 springdoc-openapi 来构建 swagger 文档。</p></blockquote><p>springdoc 官方文档地址：<a href="https://springdoc.org,这里摘录并翻译部分,更多使用可参看原文档./">https://springdoc.org，这里摘录并翻译部分，更多使用可参看原文档。</a></p><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><p>引入 ui 依赖后，在 springboot 环境下，直接启动即可，无需任何额外配置</p><ul><li>spring-webmvc 环境下引入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lastedVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>spring-webflux 环境下引入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-webflux-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lastedVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这将自动将 swagger-ui 部署到 spring-boot 应用程序：</p><ul><li>文档将以 HTML 格式提供，使用官方 swagger-ui jars</li><li>启动项目后，访问 <a href="http://server:port/context-path/swagger-ui.html">http://server:port/context-path/swagger-ui.html</a> 即可进入 Swagger UI 页面，OpenAPI 描述将在以下 json 格式的 url 中 提供：<a href="http://server:port/context-path/v3/api-docs">http://server:port/context-path/v3/api-docs</a></li><li>server：域名 或 IP</li><li>port：服务器端口</li><li>port：服务器端口</li><li>文档也可以 yaml 格式提供，位于以下路径：&#x2F;v3&#x2F;api-docs.yaml</li></ul><h3 id="替换-UI"><a href="#替换-UI" class="headerlink" title="替换 UI"></a>替换 UI</h3><p>如果嫌弃官方提供的 swagger-ui 不美观，或者使用不顺手，可以选择关闭 ui，还可以剔除掉 ui 相关的 webjar 的引入。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">springdoc:</span><br>  <span class="hljs-attr">swagger-ui:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>OpenAPI 文档信息，默认可在此 url 中获取：<a href="http://server:port/context-path/v3/api-docs。">http://server:port/context-path/v3/api-docs。</a><br>可以利用其他支持 OpenAPI 协议的工具，通过此地址，进行 API 展示，如 Apifox。<br>（ Postman 的 api 测试也可以利用此地址进行导入生成 ）</p><h3 id="Javadoc-支持"><a href="#Javadoc-支持" class="headerlink" title="Javadoc 支持"></a>Javadoc 支持</h3><p>springdoc-openapi 目前支持将 javadoc 转换为 swagger 信息来源的能力，而无需用户在项目中添加对应的 Swagger 的注解。</p><p>对于想要启用 javadoc 支持的项目，在之前的依赖之外，还需要额外添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-javadoc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lastedVersion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此依赖项改进了对 javadoc 标记和注释的支持：</p><ul><li>方法的 javadoc 注释：解析为 @Operation 描述</li><li>@return : 解析为 @Operation 响应描述</li><li>属性的 javadoc 注释：被解析为此字段的 @Schema 描述。<br>javadoc 支持基于 therapi-runtime-javadoc，所以需要开启了对应的注解处理器，否则不会生效<br>在 maven-compiler-plugin 添加对应的注解处理器:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.therapi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>therapi-runtime-javadoc-scribe<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章来源： &lt;a href=&quot;http://ballcat.cn/guide/feature/openapi.html&quot;&gt;http://ballcat.cn/guide/feature/openapi.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-OpenAPI&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>新版Maven，构建速度大幅提升</title>
    <link href="http://ysocket-blog.pages.dev/2023/07/22/mvnd/"/>
    <id>http://ysocket-blog.pages.dev/2023/07/22/mvnd/</id>
    <published>2023-07-22T01:27:00.000Z</published>
    <updated>2023-07-23T13:41:14.220Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>众所周知，Maven和Gradle几乎包含了所有Java项目的构建。而目前绝大部分的Java项目都是使用Maven的方式，Maven对比Gradle的劣势很明显，就是太慢了！<br>但是现在，Maven也可以变得更快了！</p><h5 id="maven-mvnd是什么？"><a href="#maven-mvnd是什么？" class="headerlink" title="maven-mvnd是什么？"></a>maven-mvnd是什么？</h5><p>maven-mvnd是Apache Maven团队借鉴了Gradle和Takari的优点，衍生出来的更快的构建工具，maven的强化版！</p><p>maven-mvnd 在设计上，使用一个或多个守护进程来构建服务，以此来达到并行的目的！同时，maven-mvnd 内置了maven，因此我可以在maven 过渡到 maven-mvnd的过程中实现 无缝切换！不必再安装maven或进行复杂的配置更改。</p><h5 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h5><p>mvnd 与 maven 命令几乎没有任何不同，可以通过查看mvnd -help 查看</p><p>举个例子、如要打包安装，则把 mvn clean install 替换为 mvnd clean install 即可。</p><h5 id="配置使用原先已存在的-maven-的仓库！"><a href="#配置使用原先已存在的-maven-的仓库！" class="headerlink" title="配置使用原先已存在的 maven 的仓库！"></a>配置使用原先已存在的 maven 的仓库！</h5><p>可以修改 mvnd 解压目录下 conf 里的 mvnd.properties 文件，<br>拉到最后面，放开 maven.setting 注释，把值改成自己的maven仓库地址即可，如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">maven.settings=D:<span class="hljs-regexp">//m</span>aven<span class="hljs-regexp">//</span>apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span><span class="hljs-regexp">//</span>conf<span class="hljs-regexp">//</span>settings.xml<br></code></pre></td></tr></table></figure><p>到此配置已经完成 ！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;众所周知，Maven和Gradle几乎包含了所有Java项目的构建。而目前绝大部分的Java项目都是使用Maven的方式，Maven对比Gr</summary>
      
    
    
    
    
    <category term="JAVA" scheme="http://ysocket-blog.pages.dev/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>SpringAOP底层原理</title>
    <link href="http://ysocket-blog.pages.dev/2022/12/14/spring-aop-01/"/>
    <id>http://ysocket-blog.pages.dev/2022/12/14/spring-aop-01/</id>
    <published>2022-12-14T06:04:00.000Z</published>
    <updated>2023-07-16T00:39:56.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="理解Spring-AOP"><a href="#理解Spring-AOP" class="headerlink" title="理解Spring AOP"></a>理解Spring AOP</h4><hr><p>提到AOP那我们自然会想到初学java时经常提到的OOP，OOP表示的是面向对象编程，是一种编程思想。AOP则是面向切面编程，同样也是一种编程思想。从Spring作为一个框架的角度来说，提供了一整套的面向切面编程的机制，让我们更容易进行开发，这套机制在Spring中就称为Spring AOP。</p><p><strong>AOP</strong> ：将程序中的交叉业务（日志、安全、事务等），封装成一个切面，然后注入到目标对象的具体逻辑中去。AOP可以对某个对象或某些对象的功能进行增强，具体来说，对某个对象的方法进行增强，可以在执行方法之余额外做一些事情，可以在方法前、方法后等。</p><h4 id="Spring-AOP中的概念"><a href="#Spring-AOP中的概念" class="headerlink" title="Spring AOP中的概念"></a>Spring AOP中的概念</h4><hr><ul><li><p><strong>Aspect</strong>：切面，比如被@Aspect注解的类就是切面，可以在切面中去定义Pointcut、advice等等</p></li><li><p><strong>Join point</strong>：连接点，表示一个程序在执行过程中的一个点，比如一个方法的运行，比如一个异常的处理。在Spring AOP中，一个连接点通常表示一个方法的执行。</p></li><li><p><strong>Advice</strong>：通知，表示在一个特定连接点上所采取的动作。</p></li><li><p><strong>Pointcut</strong>：切点，用来匹配一个或多个连接点，Advice与切点表达式时关联在一起的，Advice将会执行在和切点表达式所匹配的连接点上</p></li><li><p><strong>Introduction</strong>：可以使用@DeclareParents来给所匹配的类添加一个接口，并指定一个默认实现</p></li><li><p><strong>Target object</strong>：目标对象，被代理对象</p></li><li><p><strong>AOP proxy</strong>：代理工厂，用来创建代理对象的。在Spring Framework中，要么是JDK动态代理，要么是CGLIB代理</p></li><li><p><strong>Weaving</strong>：织入，表示创建代理对象的动作，这个动作Aspejctij发生在编译时期，Spring AOP在运行时</p></li></ul><h4 id="实现方式（动态代理）"><a href="#实现方式（动态代理）" class="headerlink" title="实现方式（动态代理）"></a>实现方式（动态代理）</h4><hr><h6 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h6><p>Spring AOP 解析切面源码入口 @EnableAspectJAutoProxy —&gt; AspectJAutoProxyRegistrar —&gt;AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);通过上面的注册一个Bean定义 AnnotationAwareAspectJAutoProxyCreator.class查看注册的bean的结构，可以知道注册的是一个bean的后置处理器；此处就是ioc的一个扩展点。</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>接下来我们重点看几个重要的类</p><h5 id="ProxyFactory"><a href="#ProxyFactory" class="headerlink" title="ProxyFactory"></a>ProxyFactory</h5><hr><p>这个就是应用代理技术，Spring经过封装后，生成的代理工厂类，会由它来负责创建具体的代理类。</p><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>通过ProxyFactory，我们在使用过程中不需要去关注到底使用cglib，还是jdk动态代理，Spring实现的PorxyFactory会帮助我们去判断通过何种方式生成代理类</p><ul><li><p>如果被代理类实现了接口，那么底层就会自动使用jdk动态代理，生成对应接口类型的代理对象</p></li><li><p>如果被代理类没有实现接口，那么就选择cglib技术</p></li><li><p>动态代理模式：动态代理类的源码是在程序运行期间通过JVM反射等机制动态生成，代理类和委托类的关系是运行时才确定的。</p></li></ul><p><strong>说明链接</strong>： <a href="https://mp.weixin.qq.com/s/yr4Syf1bgm3fx-HiyTW2Cg">一文搞懂Spring AOP原理，面试不再怕的！</a></p><h5 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h5><hr><p>五个注解，表示代理逻辑以及执行时机</p><ul><li><p>@Before：接口MethodBeforeAdvice，继承了接口BeforeAdvice</p></li><li><p>@AfterReturning：接口AfterReturningAdvice</p></li><li><p>@AfterThrowing：接口ThrowsAdvice</p></li><li><p>@After：接口AfterAdvice</p></li><li><p>@Around：接口AfterAdvice</p></li></ul><p>Spring会把五个注解解析为对应的Advice类：  </p><ul><li><p>@Before：AspectJMethodBeforeAdvice，实际上就是一个MethodBeforeAdvice</p></li><li><p>@AfterReturning：AspectJAfterReturningAdvice，实际上就是一个AfterReturningAdvice</p></li><li><p>@AfterThrowing：AspectJAfterThrowingAdvice，实际上就是一个MethodInterceptor</p></li><li><p>@After：AspectJAfterAdvice，实际上就是一个MethodInterceptor</p></li><li><p>@Around：AspectJAroundAdvice，实际上就是一个MethodInterceptor</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;理解Spring-AOP&quot;&gt;&lt;a href=&quot;#理解Spring-AOP&quot; class=&quot;headerlink&quot; title=&quot;理解Spring AOP&quot;&gt;&lt;/a&gt;理解Spring AOP&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;提到AOP那我们自然会想到初学java时经常提到的</summary>
      
    
    
    
    <category term="Java" scheme="http://ysocket-blog.pages.dev/categories/Java/"/>
    
    <category term="Spring" scheme="http://ysocket-blog.pages.dev/categories/Java/Spring/"/>
    
    
    <category term="Spring" scheme="http://ysocket-blog.pages.dev/tags/Spring/"/>
    
    <category term="Java" scheme="http://ysocket-blog.pages.dev/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>4 个 yyds 的 IDEA 高级调试技巧</title>
    <link href="http://ysocket-blog.pages.dev/2022/03/26/idea-debug-4-skills/"/>
    <id>http://ysocket-blog.pages.dev/2022/03/26/idea-debug-4-skills/</id>
    <published>2022-03-26T08:26:00.000Z</published>
    <updated>2022-05-07T13:12:11.969Z</updated>
    
    <content type="html"><![CDATA[<p>今天给大家带来几个我日常工作以及阅读源码必备的 IntelliJ IDEA 高级调试技巧，分分钟要起飞的节奏</p><h4 id="断点处添加-log"><a href="#断点处添加-log" class="headerlink" title="断点处添加 log"></a>断点处添加 log</h4><p>很多程序员在调试代码时都喜欢 print 一些内容，这样看起来更直观，print 完之后又很容易忘记删除掉这些没用的内容，最终将代码提交到 remote，code review 时又不得不删减这些内容重新提交，不但增加不必要的工作量，还让 log tree 的一些节点没有任何价值</p><p>IntelliJ IDEA 提供 Evaluate and Log at Breakpoints 功能恰巧可以帮助我们解决这个问题, 来看下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">ThreadLocalRandom</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> ThreadLocalRandom.current();<br>  <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (isInterested(random.nextInt(<span class="hljs-number">10</span>))) &#123;<br>    count++;<br>   &#125;<br>  &#125;<br>  System.out.printf(<span class="hljs-string">&quot;Found %d interested values%n&quot;</span>, count);<br> &#125;<br><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInterested</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>  <span class="hljs-keyword">return</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure><span id="more"></span><p>假如我们想在第 15 行查看每次调用，随即出来的 i 的值到底是多少，我们没必要在这个地方添加任何 log，在正常加断点的地方使用快捷键 <strong>Shift + 鼠标左键</strong>，就会弹出下面的内容</p><p><img src="/images/pasted-5.png" alt="image1"><br>勾选上 Evaluate and log, 并自定义你想查看的 log&#x2F;变量，比如这里的 “interested” + i, 这样以 Debug 模式运行程序（正常模式运行，不会打印这些 log）：</p><pre><code class="hljs">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)interested 6Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)interested 0Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)interested 9Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)interested 8Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)interested 1Found 3 interested valuesDisconnected from the target VM, address: &#39;127.0.0.1:0&#39;, transport: &#39;socket&#39;Process finished with exit code</code></pre><p>如果你想要更详细的信息，那就勾选上 Stack trace (大家自己查看运行结果吧)，有了这个功能，上面说的一些问题都不复存在了</p><h4 id="字段断点"><a href="#字段断点" class="headerlink" title="字段断点"></a>字段断点</h4><p>如果你阅读源码，你一定会有个困扰，类中的某个字段的值到底是在哪里改变的，你要一点点追踪调用栈，逐步排查，稍不留神，就可能有遗漏,我们可以在 IntelliJ IDEA 中为某个字段添加断点，当字段值有修改时，自动跳到相应方法位置</p><p>使用起来很简单：</p><ul><li>在字段定义处鼠标左键添加断点（会出现「眼睛」的图标）</li><li>在「眼睛」图标上鼠标右键</li><li>在弹框中勾选上 Field access 和 Field modification 两个选项<br><img src="/images/pasted-6.png" alt="upload successful"></li></ul><p>如果修改字段值的方法比较多，也可以在 Condition 的地方定义断点进入条件, 有了这个功能的加成，相信你阅读源码会顺畅许多</p><h4 id="异常断点"><a href="#异常断点" class="headerlink" title="异常断点"></a>异常断点</h4><p>除了阅读源码，一定是遇到了异常我们才开始调试代码，代码在抛出异常之后会自动停止，但是我们希望：代码停在抛出异常之前，方便我们查看当时的变量信息</p><p>这时我们就用到了 Exception Breakpoints, 当抛出异常时，在 catch 的地方打上断点，可以通过下图的几个位置获取栈顶异常类型，比如这里的 NumberFormatException</p><p><img src="/images/pasted-7.png" alt="upload successful"></p><p>知道异常类型后，就可以按照如下步骤添加异常断点了：</p><p><img src="/images/pasted-8.png" alt="upload successful"><br>然后在弹框中选择 NumberFormatException</p><p><img src="/images/pasted-9.png" alt="upload successful"><br>重新以 Debug 模式运行程序：</p><p><img src="/images/pasted-10.png" alt="upload successful"><br>程序「一路绿灯式」定位到抛出异常的位置，同时指出当时的变量信息，三个字：稳，准，狠，还有谁？</p><h4 id="方法断点"><a href="#方法断点" class="headerlink" title="方法断点"></a>方法断点</h4><p>当阅读源码时，比如 Spring，一个接口的方法可能被多个子类实现，当运行时，需要查看调用栈逐步定位实现类，IDEA 同样支持在接口方法上添加断点（<strong>快捷键 cmd+F8&#x2F;ctrl+F8</strong>）：</p><ul><li>鼠标左键在方法处点击断点（♦️形状）</li><li>断点上鼠标右键</li></ul><p>勾选上绿色框线上的内容，同样可以自定义跳转条件 Condition</p><p><img src="/images/pasted-11.png" alt="upload successful"><br>当以 Debug 模式运行程序的时候，会自动进入实现类的方法（注意断点形状）：</p><p><img src="/images/pasted-12.png" alt="upload successful"><br>看到这你应该想到常见的 Runnable 接口中的 run 方法了，同样是有作用的，大家可以自行去尝试了</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>相信有以上四种调试技巧的加成，无论是工作debug 还是私下阅读源码，都可以轻松驾驭了。<br>最后，来看看 IDEA 支持的各种断点调试类型，如果你只知道红色小圆点，那咱在留言区好好说说吧</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天给大家带来几个我日常工作以及阅读源码必备的 IntelliJ IDEA 高级调试技巧，分分钟要起飞的节奏&lt;/p&gt;
&lt;h4 id=&quot;断点处添加-log&quot;&gt;&lt;a href=&quot;#断点处添加-log&quot; class=&quot;headerlink&quot; title=&quot;断点处添加 log&quot;&gt;&lt;/a&gt;断点处添加 log&lt;/h4&gt;&lt;p&gt;很多程序员在调试代码时都喜欢 print 一些内容，这样看起来更直观，print 完之后又很容易忘记删除掉这些没用的内容，最终将代码提交到 remote，code review 时又不得不删减这些内容重新提交，不但增加不必要的工作量，还让 log tree 的一些节点没有任何价值&lt;/p&gt;
&lt;p&gt;IntelliJ IDEA 提供 Evaluate and Log at Breakpoints 功能恰巧可以帮助我们解决这个问题, 来看下面代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-type&quot;&gt;ThreadLocalRandom&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ThreadLocalRandom.current();&lt;br&gt;  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;br&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isInterested(random.nextInt(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))) &amp;#123;&lt;br&gt;    count++;&lt;br&gt;   &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;  System.out.printf(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Found %d interested values%n&amp;quot;&lt;/span&gt;, count);&lt;br&gt; &amp;#125;&lt;br&gt;&lt;br&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isInterested&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br&gt; &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java" scheme="http://ysocket-blog.pages.dev/categories/java/"/>
    
    
    <category term="java" scheme="http://ysocket-blog.pages.dev/tags/java/"/>
    
    <category term="debug" scheme="http://ysocket-blog.pages.dev/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>JAVA通过oshi获取系统和硬件信息</title>
    <link href="http://ysocket-blog.pages.dev/2022/03/18/oshi-sample/"/>
    <id>http://ysocket-blog.pages.dev/2022/03/18/oshi-sample/</id>
    <published>2022-03-18T07:27:00.000Z</published>
    <updated>2022-03-19T14:11:39.786Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、引入jar包"><a href="#一、引入jar包" class="headerlink" title="一、引入jar包"></a>一、引入jar包</h5><p>　　本项目主要使用第开源jar包：<a href="https://github.com/oshi/oshi">https://github.com/oshi/oshi</a><br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.github.oshi/oshi-core --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.oshi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oshi-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></p><span id="more"></span><h5 id="二、测试代码"><a href="#二、测试代码" class="headerlink" title="二、测试代码"></a>二、测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> oshi.SystemInfo;<br><span class="hljs-keyword">import</span> oshi.hardware.*;<br><span class="hljs-keyword">import</span> oshi.hardware.CentralProcessor.TickType;<br><span class="hljs-keyword">import</span> oshi.software.os.*;<br><span class="hljs-keyword">import</span> oshi.software.os.OperatingSystem.ProcessSort;<br><span class="hljs-keyword">import</span> oshi.util.FormatUtil;<br><span class="hljs-keyword">import</span> oshi.util.Util;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The Class SystemInfoTest.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dblock[at]dblock[dot]org</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemInfoTest</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The main method.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args the arguments</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Options: ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE</span><br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(SystemInfoTest.class);<br><br>        LOG.info(<span class="hljs-string">&quot;Initializing System...&quot;</span>);<br>        <span class="hljs-type">SystemInfo</span> <span class="hljs-variable">si</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemInfo</span>();<br><br>        <span class="hljs-type">HardwareAbstractionLayer</span> <span class="hljs-variable">hal</span> <span class="hljs-operator">=</span> si.getHardware();<br>        <span class="hljs-type">OperatingSystem</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> si.getOperatingSystem();<br><br>        System.out.println(os);<br><br>        LOG.info(<span class="hljs-string">&quot;Checking computer system...&quot;</span>);<br>        printComputerSystem(hal.getComputerSystem());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking Processor...&quot;</span>);<br>        printProcessor(hal.getProcessor());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking Memory...&quot;</span>);<br>        printMemory(hal.getMemory());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking CPU...&quot;</span>);<br>        printCpu(hal.getProcessor());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking Processes...&quot;</span>);<br>        printProcesses(os, hal.getMemory());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking Sensors...&quot;</span>);<br>        printSensors(hal.getSensors());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking Power sources...&quot;</span>);<br>        printPowerSources(hal.getPowerSources());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking Disks...&quot;</span>);<br>        printDisks(hal.getDiskStores());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking File System...&quot;</span>);<br>        printFileSystem(os.getFileSystem());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking Network interfaces...&quot;</span>);<br>        printNetworkInterfaces(hal.getNetworkIFs());<br><br>        LOG.info(<span class="hljs-string">&quot;Checking Network parameterss...&quot;</span>);<br>        printNetworkParameters(os.getNetworkParams());<br><br>        <span class="hljs-comment">// hardware: displays</span><br>        LOG.info(<span class="hljs-string">&quot;Checking Displays...&quot;</span>);<br>        printDisplays(hal.getDisplays());<br><br>        <span class="hljs-comment">// hardware: USB devices</span><br>        LOG.info(<span class="hljs-string">&quot;Checking USB Devices...&quot;</span>);<br>        printUsbDevices(hal.getUsbDevices(<span class="hljs-literal">true</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printComputerSystem</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ComputerSystem computerSystem)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;manufacturer: &quot;</span> + computerSystem.getManufacturer());<br>        System.out.println(<span class="hljs-string">&quot;model: &quot;</span> + computerSystem.getModel());<br>        System.out.println(<span class="hljs-string">&quot;serialnumber: &quot;</span> + computerSystem.getSerialNumber());<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Firmware</span> <span class="hljs-variable">firmware</span> <span class="hljs-operator">=</span> computerSystem.getFirmware();<br>        System.out.println(<span class="hljs-string">&quot;firmware:&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;  manufacturer: &quot;</span> + firmware.getManufacturer());<br>        System.out.println(<span class="hljs-string">&quot;  name: &quot;</span> + firmware.getName());<br>        System.out.println(<span class="hljs-string">&quot;  description: &quot;</span> + firmware.getDescription());<br>        System.out.println(<span class="hljs-string">&quot;  version: &quot;</span> + firmware.getVersion());<br>        System.out.println(<span class="hljs-string">&quot;  release date: &quot;</span> + (firmware.getReleaseDate() == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;unknown&quot;</span><br>                : firmware.getReleaseDate() == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;unknown&quot;</span> : FormatUtil.formatDate(firmware.getReleaseDate())));<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Baseboard</span> <span class="hljs-variable">baseboard</span> <span class="hljs-operator">=</span> computerSystem.getBaseboard();<br>        System.out.println(<span class="hljs-string">&quot;baseboard:&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;  manufacturer: &quot;</span> + baseboard.getManufacturer());<br>        System.out.println(<span class="hljs-string">&quot;  model: &quot;</span> + baseboard.getModel());<br>        System.out.println(<span class="hljs-string">&quot;  version: &quot;</span> + baseboard.getVersion());<br>        System.out.println(<span class="hljs-string">&quot;  serialnumber: &quot;</span> + baseboard.getSerialNumber());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printProcessor</span><span class="hljs-params">(CentralProcessor processor)</span> &#123;<br>        System.out.println(processor);<br>        System.out.println(<span class="hljs-string">&quot; &quot;</span> + processor.getPhysicalPackageCount() + <span class="hljs-string">&quot; physical CPU package(s)&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot; &quot;</span> + processor.getPhysicalProcessorCount() + <span class="hljs-string">&quot; physical CPU core(s)&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot; &quot;</span> + processor.getLogicalProcessorCount() + <span class="hljs-string">&quot; logical CPU(s)&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;Identifier: &quot;</span> + processor.getIdentifier());<br>        System.out.println(<span class="hljs-string">&quot;ProcessorID: &quot;</span> + processor.getProcessorID());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMemory</span><span class="hljs-params">(GlobalMemory memory)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Memory: &quot;</span> + FormatUtil.formatBytes(memory.getAvailable()) + <span class="hljs-string">&quot;/&quot;</span><br>                + FormatUtil.formatBytes(memory.getTotal()));<br>        System.out.println(<span class="hljs-string">&quot;Swap used: &quot;</span> + FormatUtil.formatBytes(memory.getSwapUsed()) + <span class="hljs-string">&quot;/&quot;</span><br>                + FormatUtil.formatBytes(memory.getSwapTotal()));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCpu</span><span class="hljs-params">(CentralProcessor processor)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Uptime: &quot;</span> + FormatUtil.formatElapsedSecs(processor.getSystemUptime()));<br>        System.out.println(<br>                <span class="hljs-string">&quot;Context Switches/Interrupts: &quot;</span> + processor.getContextSwitches() + <span class="hljs-string">&quot; / &quot;</span> + processor.getInterrupts());<br><br>        <span class="hljs-type">long</span>[] prevTicks = processor.getSystemCpuLoadTicks();<br>        System.out.println(<span class="hljs-string">&quot;CPU, IOWait, and IRQ ticks @ 0 sec:&quot;</span> + Arrays.toString(prevTicks));<br>        <span class="hljs-comment">// Wait a second...</span><br>        Util.sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-type">long</span>[] ticks = processor.getSystemCpuLoadTicks();<br>        System.out.println(<span class="hljs-string">&quot;CPU, IOWait, and IRQ ticks @ 1 sec:&quot;</span> + Arrays.toString(ticks));<br>        <span class="hljs-type">long</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> ticks[TickType.USER.getIndex()] - prevTicks[TickType.USER.getIndex()];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nice</span> <span class="hljs-operator">=</span> ticks[TickType.NICE.getIndex()] - prevTicks[TickType.NICE.getIndex()];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">sys</span> <span class="hljs-operator">=</span> ticks[TickType.SYSTEM.getIndex()] - prevTicks[TickType.SYSTEM.getIndex()];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">idle</span> <span class="hljs-operator">=</span> ticks[TickType.IDLE.getIndex()] - prevTicks[TickType.IDLE.getIndex()];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">iowait</span> <span class="hljs-operator">=</span> ticks[TickType.IOWAIT.getIndex()] - prevTicks[TickType.IOWAIT.getIndex()];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">irq</span> <span class="hljs-operator">=</span> ticks[TickType.IRQ.getIndex()] - prevTicks[TickType.IRQ.getIndex()];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">softirq</span> <span class="hljs-operator">=</span> ticks[TickType.SOFTIRQ.getIndex()] - prevTicks[TickType.SOFTIRQ.getIndex()];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">steal</span> <span class="hljs-operator">=</span> ticks[TickType.STEAL.getIndex()] - prevTicks[TickType.STEAL.getIndex()];<br>        <span class="hljs-type">long</span> <span class="hljs-variable">totalCpu</span> <span class="hljs-operator">=</span> user + nice + sys + idle + iowait + irq + softirq + steal;<br><br>        System.out.format(<br>                <span class="hljs-string">&quot;User: %.1f%% Nice: %.1f%% System: %.1f%% Idle: %.1f%% IOwait: %.1f%% IRQ: %.1f%% SoftIRQ: %.1f%% Steal: %.1f%%%n&quot;</span>,<br>                <span class="hljs-number">100d</span> * user / totalCpu, <span class="hljs-number">100d</span> * nice / totalCpu, <span class="hljs-number">100d</span> * sys / totalCpu, <span class="hljs-number">100d</span> * idle / totalCpu,<br>                <span class="hljs-number">100d</span> * iowait / totalCpu, <span class="hljs-number">100d</span> * irq / totalCpu, <span class="hljs-number">100d</span> * softirq / totalCpu, <span class="hljs-number">100d</span> * steal / totalCpu);<br>        System.out.format(<span class="hljs-string">&quot;CPU load: %.1f%% (counting ticks)%n&quot;</span>, processor.getSystemCpuLoadBetweenTicks() * <span class="hljs-number">100</span>);<br>        System.out.format(<span class="hljs-string">&quot;CPU load: %.1f%% (OS MXBean)%n&quot;</span>, processor.getSystemCpuLoad() * <span class="hljs-number">100</span>);<br>        <span class="hljs-type">double</span>[] loadAverage = processor.getSystemLoadAverage(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;CPU load averages:&quot;</span> + (loadAverage[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot; N/A&quot;</span> : String.format(<span class="hljs-string">&quot; %.2f&quot;</span>, loadAverage[<span class="hljs-number">0</span>]))<br>                + (loadAverage[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot; N/A&quot;</span> : String.format(<span class="hljs-string">&quot; %.2f&quot;</span>, loadAverage[<span class="hljs-number">1</span>]))<br>                + (loadAverage[<span class="hljs-number">2</span>] &lt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot; N/A&quot;</span> : String.format(<span class="hljs-string">&quot; %.2f&quot;</span>, loadAverage[<span class="hljs-number">2</span>])));<br>        <span class="hljs-comment">// per core CPU</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">procCpu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;CPU load per processor:&quot;</span>);<br>        <span class="hljs-type">double</span>[] load = processor.getProcessorCpuLoadBetweenTicks();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> avg : load) &#123;<br>            procCpu.append(String.format(<span class="hljs-string">&quot; %.1f%%&quot;</span>, avg * <span class="hljs-number">100</span>));<br>        &#125;<br>        System.out.println(procCpu.toString());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printProcesses</span><span class="hljs-params">(OperatingSystem os, GlobalMemory memory)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Processes: &quot;</span> + os.getProcessCount() + <span class="hljs-string">&quot;, Threads: &quot;</span> + os.getThreadCount());<br>        <span class="hljs-comment">// Sort by highest CPU</span><br>        List&lt;OSProcess&gt; procs = Arrays.asList(os.getProcesses(<span class="hljs-number">5</span>, ProcessSort.CPU));<br><br>        System.out.println(<span class="hljs-string">&quot;   PID  %CPU %MEM       VSZ       RSS Name&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; procs.size() &amp;&amp; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">OSProcess</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> procs.get(i);<br>            System.out.format(<span class="hljs-string">&quot; %5d %5.1f %4.1f %9s %9s %s%n&quot;</span>, p.getProcessID(),<br>                    <span class="hljs-number">100d</span> * (p.getKernelTime() + p.getUserTime()) / p.getUpTime(),<br>                    <span class="hljs-number">100d</span> * p.getResidentSetSize() / memory.getTotal(), FormatUtil.formatBytes(p.getVirtualSize()),<br>                    FormatUtil.formatBytes(p.getResidentSetSize()), p.getName());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printSensors</span><span class="hljs-params">(Sensors sensors)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sensors:&quot;</span>);<br>        System.out.format(<span class="hljs-string">&quot; CPU Temperature: %.1f°C%n&quot;</span>, sensors.getCpuTemperature());<br>        System.out.println(<span class="hljs-string">&quot; Fan Speeds: &quot;</span> + Arrays.toString(sensors.getFanSpeeds()));<br>        System.out.format(<span class="hljs-string">&quot; CPU Voltage: %.1fV%n&quot;</span>, sensors.getCpuVoltage());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printPowerSources</span><span class="hljs-params">(PowerSource[] powerSources)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Power: &quot;</span>);<br>        <span class="hljs-keyword">if</span> (powerSources.length == <span class="hljs-number">0</span>) &#123;<br>            sb.append(<span class="hljs-string">&quot;Unknown&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">timeRemaining</span> <span class="hljs-operator">=</span> powerSources[<span class="hljs-number">0</span>].getTimeRemaining();<br>            <span class="hljs-keyword">if</span> (timeRemaining &lt; -<span class="hljs-number">1d</span>) &#123;<br>                sb.append(<span class="hljs-string">&quot;Charging&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (timeRemaining &lt; <span class="hljs-number">0d</span>) &#123;<br>                sb.append(<span class="hljs-string">&quot;Calculating time remaining&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sb.append(String.format(<span class="hljs-string">&quot;%d:%02d remaining&quot;</span>, (<span class="hljs-type">int</span>) (timeRemaining / <span class="hljs-number">3600</span>),<br>                        (<span class="hljs-type">int</span>) (timeRemaining / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (PowerSource pSource : powerSources) &#123;<br>            sb.append(String.format(<span class="hljs-string">&quot;%n %s @ %.1f%%&quot;</span>, pSource.getName(), pSource.getRemainingCapacity() * <span class="hljs-number">100d</span>));<br>        &#125;<br>        System.out.println(sb.toString());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printDisks</span><span class="hljs-params">(HWDiskStore[] diskStores)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Disks:&quot;</span>);<br>        <span class="hljs-keyword">for</span> (HWDiskStore disk : diskStores) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">readwrite</span> <span class="hljs-operator">=</span> disk.getReads() &gt; <span class="hljs-number">0</span> || disk.getWrites() &gt; <span class="hljs-number">0</span>;<br>            System.out.format(<span class="hljs-string">&quot; %s: (model: %s - S/N: %s) size: %s, reads: %s (%s), writes: %s (%s), xfer: %s ms%n&quot;</span>,<br>                    disk.getName(), disk.getModel(), disk.getSerial(),<br>                    disk.getSize() &gt; <span class="hljs-number">0</span> ? FormatUtil.formatBytesDecimal(disk.getSize()) : <span class="hljs-string">&quot;?&quot;</span>,<br>                    readwrite ? disk.getReads() : <span class="hljs-string">&quot;?&quot;</span>, readwrite ? FormatUtil.formatBytes(disk.getReadBytes()) : <span class="hljs-string">&quot;?&quot;</span>,<br>                    readwrite ? disk.getWrites() : <span class="hljs-string">&quot;?&quot;</span>, readwrite ? FormatUtil.formatBytes(disk.getWriteBytes()) : <span class="hljs-string">&quot;?&quot;</span>,<br>                    readwrite ? disk.getTransferTime() : <span class="hljs-string">&quot;?&quot;</span>);<br>            HWPartition[] partitions = disk.getPartitions();<br>            <span class="hljs-keyword">if</span> (partitions == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// TODO Remove when all OS&#x27;s implemented</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (HWPartition part : partitions) &#123;<br>                System.out.format(<span class="hljs-string">&quot; |-- %s: %s (%s) Maj:Min=%d:%d, size: %s%s%n&quot;</span>, part.getIdentification(),<br>                        part.getName(), part.getType(), part.getMajor(), part.getMinor(),<br>                        FormatUtil.formatBytesDecimal(part.getSize()),<br>                        part.getMountPoint().isEmpty() ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot; @ &quot;</span> + part.getMountPoint());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printFileSystem</span><span class="hljs-params">(FileSystem fileSystem)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;File System:&quot;</span>);<br><br>        System.out.format(<span class="hljs-string">&quot; File Descriptors: %d/%d%n&quot;</span>, fileSystem.getOpenFileDescriptors(),<br>                fileSystem.getMaxFileDescriptors());<br><br>        OSFileStore[] fsArray = fileSystem.getFileStores();<br>        <span class="hljs-keyword">for</span> (OSFileStore fs : fsArray) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">usable</span> <span class="hljs-operator">=</span> fs.getUsableSpace();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> fs.getTotalSpace();<br>            System.out.format(<br>                    <span class="hljs-string">&quot; %s (%s) [%s] %s of %s free (%.1f%%) is %s &quot;</span><br>                            + (fs.getLogicalVolume() != <span class="hljs-literal">null</span> &amp;&amp; fs.getLogicalVolume().length() &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;[%s]&quot;</span> : <span class="hljs-string">&quot;%s&quot;</span>)<br>                            + <span class="hljs-string">&quot; and is mounted at %s%n&quot;</span>,<br>                    fs.getName(), fs.getDescription().isEmpty() ? <span class="hljs-string">&quot;file system&quot;</span> : fs.getDescription(), fs.getType(),<br>                    FormatUtil.formatBytes(usable), FormatUtil.formatBytes(fs.getTotalSpace()), <span class="hljs-number">100d</span> * usable / total,<br>                    fs.getVolume(), fs.getLogicalVolume(), fs.getMount());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNetworkInterfaces</span><span class="hljs-params">(NetworkIF[] networkIFs)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Network interfaces:&quot;</span>);<br>        <span class="hljs-keyword">for</span> (NetworkIF net : networkIFs) &#123;<br>            System.out.format(<span class="hljs-string">&quot; Name: %s (%s)%n&quot;</span>, net.getName(), net.getDisplayName());<br>            System.out.format(<span class="hljs-string">&quot;   MAC Address: %s %n&quot;</span>, net.getMacaddr());<br>            System.out.format(<span class="hljs-string">&quot;   MTU: %s, Speed: %s %n&quot;</span>, net.getMTU(), FormatUtil.formatValue(net.getSpeed(), <span class="hljs-string">&quot;bps&quot;</span>));<br>            System.out.format(<span class="hljs-string">&quot;   IPv4: %s %n&quot;</span>, Arrays.toString(net.getIPv4addr()));<br>            System.out.format(<span class="hljs-string">&quot;   IPv6: %s %n&quot;</span>, Arrays.toString(net.getIPv6addr()));<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">hasData</span> <span class="hljs-operator">=</span> net.getBytesRecv() &gt; <span class="hljs-number">0</span> || net.getBytesSent() &gt; <span class="hljs-number">0</span> || net.getPacketsRecv() &gt; <span class="hljs-number">0</span><br>                    || net.getPacketsSent() &gt; <span class="hljs-number">0</span>;<br>            System.out.format(<span class="hljs-string">&quot;   Traffic: received %s/%s%s; transmitted %s/%s%s %n&quot;</span>,<br>                    hasData ? net.getPacketsRecv() + <span class="hljs-string">&quot; packets&quot;</span> : <span class="hljs-string">&quot;?&quot;</span>,<br>                    hasData ? FormatUtil.formatBytes(net.getBytesRecv()) : <span class="hljs-string">&quot;?&quot;</span>,<br>                    hasData ? <span class="hljs-string">&quot; (&quot;</span> + net.getInErrors() + <span class="hljs-string">&quot; err)&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>                    hasData ? net.getPacketsSent() + <span class="hljs-string">&quot; packets&quot;</span> : <span class="hljs-string">&quot;?&quot;</span>,<br>                    hasData ? FormatUtil.formatBytes(net.getBytesSent()) : <span class="hljs-string">&quot;?&quot;</span>,<br>                    hasData ? <span class="hljs-string">&quot; (&quot;</span> + net.getOutErrors() + <span class="hljs-string">&quot; err)&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNetworkParameters</span><span class="hljs-params">(NetworkParams networkParams)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Network parameters:&quot;</span>);<br>        System.out.format(<span class="hljs-string">&quot; Host name: %s%n&quot;</span>, networkParams.getHostName());<br>        System.out.format(<span class="hljs-string">&quot; Domain name: %s%n&quot;</span>, networkParams.getDomainName());<br>        System.out.format(<span class="hljs-string">&quot; DNS servers: %s%n&quot;</span>, Arrays.toString(networkParams.getDnsServers()));<br>        System.out.format(<span class="hljs-string">&quot; IPv4 Gateway: %s%n&quot;</span>, networkParams.getIpv4DefaultGateway());<br>        System.out.format(<span class="hljs-string">&quot; IPv6 Gateway: %s%n&quot;</span>, networkParams.getIpv6DefaultGateway());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printDisplays</span><span class="hljs-params">(Display[] displays)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Displays:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Display display : displays) &#123;<br>            System.out.println(<span class="hljs-string">&quot; Display &quot;</span> + i + <span class="hljs-string">&quot;:&quot;</span>);<br>            System.out.println(display.toString());<br>            i++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printUsbDevices</span><span class="hljs-params">(UsbDevice[] usbDevices)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;USB Devices:&quot;</span>);<br>        <span class="hljs-keyword">for</span> (UsbDevice usbDevice : usbDevices) &#123;<br>            System.out.println(usbDevice.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="三、结果"><a href="#三、结果" class="headerlink" title="三、结果"></a>三、结果</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Microsoft</span> <span class="hljs-string">Windows</span> <span class="hljs-number">10</span> <span class="hljs-string">build</span> <span class="hljs-number">15063</span><br><span class="hljs-attr">manufacturer:</span> <span class="hljs-string">LENOVO</span><br><span class="hljs-attr">model:</span> <span class="hljs-string">80RU</span><br><span class="hljs-attr">serialnumber:</span> <span class="hljs-string">R90LN08UR9N0B6922009</span><br><span class="hljs-attr">firmware:</span><br>  <span class="hljs-attr">manufacturer:</span> <span class="hljs-string">LENOVO</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">E5CN53WW</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">E5CN53WW</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">LENOVO</span> <span class="hljs-bullet">-</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">release date:</span> <span class="hljs-number">07</span><span class="hljs-string">/11/2016</span><br><span class="hljs-attr">baseboard:</span><br>  <span class="hljs-attr">manufacturer:</span> <span class="hljs-string">LENOVO</span><br>  <span class="hljs-attr">model:</span> <span class="hljs-string">unknown</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">SDK0K09938</span> <span class="hljs-string">WIN</span><br>  <span class="hljs-attr">serialnumber:</span> <span class="hljs-string">R90LN08U</span><br><span class="hljs-string">Intel(R)</span> <span class="hljs-string">Core(TM)</span> <span class="hljs-string">i5-6300HQ</span> <span class="hljs-string">CPU</span> <span class="hljs-string">@</span> <span class="hljs-number">2.</span><span class="hljs-string">30GHz</span><br> <span class="hljs-number">1</span> <span class="hljs-string">physical</span> <span class="hljs-string">CPU</span> <span class="hljs-string">package(s)</span><br> <span class="hljs-number">4</span> <span class="hljs-string">physical</span> <span class="hljs-string">CPU</span> <span class="hljs-string">core(s)</span><br> <span class="hljs-number">4</span> <span class="hljs-string">logical</span> <span class="hljs-string">CPU(s)</span><br><span class="hljs-attr">Identifier:</span> <span class="hljs-string">Intel64</span> <span class="hljs-string">Family</span> <span class="hljs-number">6</span> <span class="hljs-string">Model</span> <span class="hljs-number">94</span> <span class="hljs-string">Stepping</span> <span class="hljs-number">3</span><br><span class="hljs-attr">ProcessorID:</span> <span class="hljs-string">BFEBFBFF000506E3</span><br><span class="hljs-attr">Memory:</span> <span class="hljs-number">1.5</span> <span class="hljs-string">GiB/7.8</span> <span class="hljs-string">GiB</span><br><span class="hljs-attr">Swap used:</span> <span class="hljs-number">84.4</span> <span class="hljs-string">MiB/6.3</span> <span class="hljs-string">GiB</span><br><span class="hljs-attr">Uptime:</span> <span class="hljs-number">1</span> <span class="hljs-string">days,</span> <span class="hljs-number">11</span><span class="hljs-string">:45:25</span><br><span class="hljs-attr">Context Switches/Interrupts:</span> <span class="hljs-number">648525190</span> <span class="hljs-string">/</span> <span class="hljs-number">338012494</span><br><span class="hljs-string">CPU,</span> <span class="hljs-string">IOWait,</span> <span class="hljs-string">and</span> <span class="hljs-string">IRQ</span> <span class="hljs-string">ticks</span> <span class="hljs-string">@</span> <span class="hljs-number">0</span> <span class="hljs-string">sec:[18421421,</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-number">10068431</span><span class="hljs-string">,</span> <span class="hljs-number">288934828</span><span class="hljs-string">,</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-number">266351</span><span class="hljs-string">,</span> <span class="hljs-number">143296</span><span class="hljs-string">,</span> <span class="hljs-number">0</span><span class="hljs-string">]</span><br><span class="hljs-string">CPU,</span> <span class="hljs-string">IOWait,</span> <span class="hljs-string">and</span> <span class="hljs-string">IRQ</span> <span class="hljs-string">ticks</span> <span class="hljs-string">@</span> <span class="hljs-number">1</span> <span class="hljs-string">sec:[18421578,</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-number">10068486</span><span class="hljs-string">,</span> <span class="hljs-number">288938671</span><span class="hljs-string">,</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-number">266351</span><span class="hljs-string">,</span> <span class="hljs-number">143304</span><span class="hljs-string">,</span> <span class="hljs-number">0</span><span class="hljs-string">]</span><br><span class="hljs-attr">User:</span> <span class="hljs-number">3.9</span><span class="hljs-string">%</span> <span class="hljs-attr">Nice:</span> <span class="hljs-number">0.0</span><span class="hljs-string">%</span> <span class="hljs-attr">System:</span> <span class="hljs-number">1.4</span><span class="hljs-string">%</span> <span class="hljs-attr">Idle:</span> <span class="hljs-number">94.6</span><span class="hljs-string">%</span> <span class="hljs-attr">IOwait:</span> <span class="hljs-number">0.0</span><span class="hljs-string">%</span> <span class="hljs-attr">IRQ:</span> <span class="hljs-number">0.0</span><span class="hljs-string">%</span> <span class="hljs-attr">SoftIRQ:</span> <span class="hljs-number">0.2</span><span class="hljs-string">%</span> <span class="hljs-attr">Steal:</span> <span class="hljs-number">0.0</span><span class="hljs-string">%</span><br><span class="hljs-attr">CPU load:</span> <span class="hljs-number">13.0</span><span class="hljs-string">%</span> <span class="hljs-string">(counting</span> <span class="hljs-string">ticks)</span><br><span class="hljs-attr">CPU load:</span> <span class="hljs-number">17.4</span><span class="hljs-string">%</span> <span class="hljs-string">(OS</span> <span class="hljs-string">MXBean)</span><br><span class="hljs-attr">CPU load averages:</span> <span class="hljs-string">N/A</span> <span class="hljs-string">N/A</span> <span class="hljs-string">N/A</span><br><span class="hljs-attr">CPU load per processor:</span> <span class="hljs-number">19.3</span><span class="hljs-string">%</span> <span class="hljs-number">12.8</span><span class="hljs-string">%</span> <span class="hljs-number">12.8</span><span class="hljs-string">%</span> <span class="hljs-number">12.8</span><span class="hljs-string">%</span><br><span class="hljs-attr">Processes:</span> <span class="hljs-number">184</span><span class="hljs-string">,</span> <span class="hljs-attr">Threads:</span> <span class="hljs-number">2447</span><br>   <span class="hljs-string">PID</span>  <span class="hljs-string">%CPU</span> <span class="hljs-string">%MEM</span>       <span class="hljs-string">VSZ</span>       <span class="hljs-string">RSS</span> <span class="hljs-string">Name</span><br>     <span class="hljs-number">0</span> <span class="hljs-number">100.0</span>  <span class="hljs-number">0.0</span>    <span class="hljs-number">64</span> <span class="hljs-string">KiB</span>     <span class="hljs-number">8</span> <span class="hljs-string">KiB</span> <span class="hljs-string">System</span> <span class="hljs-string">Idle</span> <span class="hljs-string">Process</span><br>  <span class="hljs-number">5416  </span><span class="hljs-number">10.0</span>  <span class="hljs-number">1.6</span>   <span class="hljs-number">3.4</span> <span class="hljs-string">GiB</span> <span class="hljs-number">130.4</span> <span class="hljs-string">MiB</span> <span class="hljs-string">java.exe</span><br> <span class="hljs-number">12676</span>   <span class="hljs-number">8.8</span>  <span class="hljs-number">1.3</span>   <span class="hljs-number">2.1</span> <span class="hljs-string">GiB</span> <span class="hljs-number">104.9</span> <span class="hljs-string">MiB</span> <span class="hljs-string">java.exe</span><br> <span class="hljs-number">11988</span>   <span class="hljs-number">5.8</span> <span class="hljs-number">16.8</span>   <span class="hljs-number">3.3</span> <span class="hljs-string">GiB</span>   <span class="hljs-number">1.3</span> <span class="hljs-string">GiB</span> <span class="hljs-string">idea64.exe</span><br>  <span class="hljs-number">5312   </span><span class="hljs-number">4.4</span>  <span class="hljs-number">1.3</span>   <span class="hljs-number">2.0</span> <span class="hljs-string">TiB</span> <span class="hljs-number">101.4</span> <span class="hljs-string">MiB</span> <span class="hljs-string">chrome.exe</span><br><span class="hljs-attr">Sensors:</span><br> <span class="hljs-attr">CPU Temperature:</span> <span class="hljs-number">42.0</span><span class="hljs-string">°C</span><br> <span class="hljs-attr">Fan Speeds:</span> [<span class="hljs-number">0</span>]<br> <span class="hljs-attr">CPU Voltage:</span> <span class="hljs-number">0.</span><span class="hljs-string">0V</span><br><span class="hljs-attr">Power:</span> <span class="hljs-string">Charging</span><br> <span class="hljs-string">System</span> <span class="hljs-string">Battery</span> <span class="hljs-string">@</span> <span class="hljs-number">96.6</span><span class="hljs-string">%</span><br><span class="hljs-attr">Disks:</span><br> <span class="hljs-string">\\.\PHYSICALDRIVE0:</span> <span class="hljs-string">(model:</span> <span class="hljs-string">SanDisk</span> <span class="hljs-string">SD7SN6S128G</span> <span class="hljs-string">(标准磁盘驱动器)</span> <span class="hljs-bullet">-</span> <span class="hljs-attr">S/N:</span> <span class="hljs-number">161416401094</span><span class="hljs-string">)</span> <span class="hljs-attr">size:</span> <span class="hljs-number">128.0</span> <span class="hljs-string">GB,</span> <span class="hljs-attr">reads:</span> <span class="hljs-number">1117123</span> <span class="hljs-string">(33.4</span> <span class="hljs-string">GiB),</span> <span class="hljs-attr">writes:</span> <span class="hljs-number">703948</span> <span class="hljs-string">(21.2</span> <span class="hljs-string">GiB),</span> <span class="hljs-attr">xfer:</span> <span class="hljs-number">2570354</span> <span class="hljs-string">ms</span><br> <span class="hljs-string">|--</span> <span class="hljs-string">磁盘</span> <span class="hljs-comment">#0，分区 #0: GPT: Basic Data (GPT: 基本数据) Maj:Min=0:0, size: 471.9 MB @ F:\</span><br> <span class="hljs-string">|--</span> <span class="hljs-string">磁盘</span> <span class="hljs-comment">#0，分区 #1: GPT: System (GPT: 系统) Maj:Min=0:1, size: 104.9 MB</span><br> <span class="hljs-string">|--</span> <span class="hljs-string">磁盘</span> <span class="hljs-comment">#0，分区 #2: GPT: Basic Data (GPT: 基本数据) Maj:Min=0:2, size: 126.6 GB @ C:\</span><br> <span class="hljs-string">|--</span> <span class="hljs-string">磁盘</span> <span class="hljs-comment">#0，分区 #3: GPT: Basic Data (GPT: 基本数据) Maj:Min=0:3, size: 845.2 MB @ G:\</span><br> <span class="hljs-string">\\.\PHYSICALDRIVE1:</span> <span class="hljs-string">(model:</span> <span class="hljs-string">WDC</span> <span class="hljs-string">WD10SPCX-24HWST1</span> <span class="hljs-string">(标准磁盘驱动器)</span> <span class="hljs-bullet">-</span> <span class="hljs-attr">S/N:</span>      <span class="hljs-string">WD-WX31A86F35XC)</span> <span class="hljs-attr">size:</span> <span class="hljs-number">1.0</span> <span class="hljs-string">TB,</span> <span class="hljs-attr">reads:</span> <span class="hljs-number">379263</span> <span class="hljs-string">(6.0</span> <span class="hljs-string">GiB),</span> <span class="hljs-attr">writes:</span> <span class="hljs-number">103105</span> <span class="hljs-string">(2.6</span> <span class="hljs-string">GiB),</span> <span class="hljs-attr">xfer:</span> <span class="hljs-number">4014792</span> <span class="hljs-string">ms</span><br> <span class="hljs-string">|--</span> <span class="hljs-string">磁盘</span> <span class="hljs-comment">#1，分区 #0: GPT: Basic Data (GPT: 基本数据) Maj:Min=1:0, size: 475.9 GB @ D:\</span><br> <span class="hljs-string">|--</span> <span class="hljs-string">磁盘</span> <span class="hljs-comment">#1，分区 #1: GPT: Basic Data (GPT: 基本数据) Maj:Min=1:1, size: 524.3 GB @ E:\</span><br><span class="hljs-attr">File System:</span><br> <span class="hljs-attr">File Descriptors:</span> <span class="hljs-number">0</span><span class="hljs-string">/0</span><br> <span class="hljs-string">本地固定磁盘</span> <span class="hljs-string">(F:)</span> <span class="hljs-string">(Fixed</span> <span class="hljs-string">drive)</span> [<span class="hljs-string">NTFS</span>] <span class="hljs-number">436.1</span> <span class="hljs-string">MiB</span> <span class="hljs-string">of</span> <span class="hljs-number">450.0</span> <span class="hljs-string">MiB</span> <span class="hljs-string">free</span> <span class="hljs-string">(96.9%)</span> <span class="hljs-string">is</span> <span class="hljs-string">\\?\Volume&#123;9afc85a4-9f44-11e7-ab77-a5dc01376557&#125;\</span>  <span class="hljs-string">and</span> <span class="hljs-string">is</span> <span class="hljs-string">mounted</span> <span class="hljs-string">at</span> <span class="hljs-string">F:\</span><br> <span class="hljs-string">本地固定磁盘</span> <span class="hljs-string">(C:)</span> <span class="hljs-string">(Fixed</span> <span class="hljs-string">drive)</span> [<span class="hljs-string">NTFS</span>] <span class="hljs-number">12.9</span> <span class="hljs-string">GiB</span> <span class="hljs-string">of</span> <span class="hljs-number">117.9</span> <span class="hljs-string">GiB</span> <span class="hljs-string">free</span> <span class="hljs-string">(11.0%)</span> <span class="hljs-string">is</span> <span class="hljs-string">\\?\Volume&#123;01a1a160-fbb4-49c7-be19-6dd52882bcbc&#125;\</span>  <span class="hljs-string">and</span> <span class="hljs-string">is</span> <span class="hljs-string">mounted</span> <span class="hljs-string">at</span> <span class="hljs-string">C:\</span><br> <span class="hljs-string">本地固定磁盘</span> <span class="hljs-string">(G:)</span> <span class="hljs-string">(Fixed</span> <span class="hljs-string">drive)</span> [<span class="hljs-string">NTFS</span>] <span class="hljs-number">303.4</span> <span class="hljs-string">MiB</span> <span class="hljs-string">of</span> <span class="hljs-number">806.0</span> <span class="hljs-string">MiB</span> <span class="hljs-string">free</span> <span class="hljs-string">(37.6%)</span> <span class="hljs-string">is</span> <span class="hljs-string">\\?\Volume&#123;9afc85a5-9f44-11e7-ab77-a5dc01376557&#125;\</span>  <span class="hljs-string">and</span> <span class="hljs-string">is</span> <span class="hljs-string">mounted</span> <span class="hljs-string">at</span> <span class="hljs-string">G:\</span><br> <span class="hljs-string">本地固定磁盘</span> <span class="hljs-string">(D:)</span> <span class="hljs-string">(Fixed</span> <span class="hljs-string">drive)</span> [<span class="hljs-string">NTFS</span>] <span class="hljs-number">161.8</span> <span class="hljs-string">GiB</span> <span class="hljs-string">of</span> <span class="hljs-number">443.2</span> <span class="hljs-string">GiB</span> <span class="hljs-string">free</span> <span class="hljs-string">(36.5%)</span> <span class="hljs-string">is</span> <span class="hljs-string">\\?\Volume&#123;a287f045-a9ac-4669-ab44-bdbd74692600&#125;\</span>  <span class="hljs-string">and</span> <span class="hljs-string">is</span> <span class="hljs-string">mounted</span> <span class="hljs-string">at</span> <span class="hljs-string">D:\</span><br> <span class="hljs-string">本地固定磁盘</span> <span class="hljs-string">(E:)</span> <span class="hljs-string">(Fixed</span> <span class="hljs-string">drive)</span> [<span class="hljs-string">NTFS</span>] <span class="hljs-number">246.0</span> <span class="hljs-string">GiB</span> <span class="hljs-string">of</span> <span class="hljs-number">488.3</span> <span class="hljs-string">GiB</span> <span class="hljs-string">free</span> <span class="hljs-string">(50.4%)</span> <span class="hljs-string">is</span> <span class="hljs-string">\\?\Volume&#123;84c6da35-38e7-457e-b528-c12da6ed2898&#125;\</span>  <span class="hljs-string">and</span> <span class="hljs-string">is</span> <span class="hljs-string">mounted</span> <span class="hljs-string">at</span> <span class="hljs-string">E:\</span><br><span class="hljs-attr">Network interfaces:</span><br> <span class="hljs-attr">Name:</span> <span class="hljs-string">wlan0</span> <span class="hljs-string">(Microsoft</span> <span class="hljs-string">Wi-Fi</span> <span class="hljs-string">Direct</span> <span class="hljs-string">Virtual</span> <span class="hljs-string">Adapter)</span><br>   <span class="hljs-attr">MAC Address:</span> <span class="hljs-number">84</span><span class="hljs-string">:ef:18:36:4c:ab</span> <br>   <span class="hljs-attr">MTU:</span> <span class="hljs-number">1500</span><span class="hljs-string">,</span> <span class="hljs-attr">Speed:</span> <span class="hljs-number">0</span> <span class="hljs-string">bps</span> <br>   <span class="hljs-attr">IPv4:</span> [] <br>   <span class="hljs-attr">IPv6:</span> [<span class="hljs-string">fe80:0:0:0:55ed:790e:b70:ea43</span>] <br>   <span class="hljs-attr">Traffic:</span> <span class="hljs-string">received</span> <span class="hljs-string">?/?;</span> <span class="hljs-string">transmitted</span> <span class="hljs-string">?/?</span> <br> <span class="hljs-attr">Name:</span> <span class="hljs-string">net2</span> <span class="hljs-string">(Microsoft</span> <span class="hljs-string">Teredo</span> <span class="hljs-string">Tunneling</span> <span class="hljs-string">Adapter)</span><br>   <span class="hljs-attr">MAC Address:</span> <span class="hljs-number">00</span><span class="hljs-string">:00:00:00:00:00:00:e0</span> <br>   <span class="hljs-attr">MTU:</span> <span class="hljs-number">1280</span><span class="hljs-string">,</span> <span class="hljs-attr">Speed:</span> <span class="hljs-number">100</span> <span class="hljs-string">Kbps</span> <br>   <span class="hljs-attr">IPv4:</span> [] <br>   <span class="hljs-attr">IPv6:</span> [<span class="hljs-number">2001</span><span class="hljs-string">:0:9d38:6ab8:2446:2d3f:34a2:86f5</span>, <span class="hljs-string">fe80:0:0:0:2446:2d3f:34a2:86f5</span>] <br>   <span class="hljs-attr">Traffic:</span> <span class="hljs-string">received</span> <span class="hljs-number">15</span> <span class="hljs-string">packets/2.2</span> <span class="hljs-string">KiB</span> <span class="hljs-string">(0</span> <span class="hljs-string">err);</span> <span class="hljs-string">transmitted</span> <span class="hljs-number">1580 </span><span class="hljs-string">packets/209.9</span> <span class="hljs-string">KiB</span> <span class="hljs-string">(0</span> <span class="hljs-string">err)</span> <br> <span class="hljs-attr">Name:</span> <span class="hljs-string">eth7</span> <span class="hljs-string">(Realtek</span> <span class="hljs-string">PCIe</span> <span class="hljs-string">GBE</span> <span class="hljs-string">Family</span> <span class="hljs-string">Controller)</span><br>   <span class="hljs-attr">MAC Address:</span> <span class="hljs-number">54</span><span class="hljs-string">:ee:75:b0:ed:33</span> <br>   <span class="hljs-attr">MTU:</span> <span class="hljs-number">1500</span><span class="hljs-string">,</span> <span class="hljs-attr">Speed:</span> <span class="hljs-number">0</span> <span class="hljs-string">bps</span> <br>   <span class="hljs-attr">IPv4:</span> [] <br>   <span class="hljs-attr">IPv6:</span> [<span class="hljs-string">fe80:0:0:0:d0:cff0:250f:34d0</span>] <br>   <span class="hljs-attr">Traffic:</span> <span class="hljs-string">received</span> <span class="hljs-string">?/?;</span> <span class="hljs-string">transmitted</span> <span class="hljs-string">?/?</span> <br> <span class="hljs-attr">Name:</span> <span class="hljs-string">wlan2</span> <span class="hljs-string">(Intel(R)</span> <span class="hljs-string">Dual</span> <span class="hljs-string">Band</span> <span class="hljs-string">Wireless-AC</span> <span class="hljs-number">3165</span><span class="hljs-string">)</span><br>   <span class="hljs-attr">MAC Address:</span> <span class="hljs-number">84</span><span class="hljs-string">:ef:18:36:4c:aa</span> <br>   <span class="hljs-attr">MTU:</span> <span class="hljs-number">1500</span><span class="hljs-string">,</span> <span class="hljs-attr">Speed:</span> <span class="hljs-number">72.2</span> <span class="hljs-string">Mbps</span> <br>   <span class="hljs-attr">IPv4:</span> [<span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.132</span>] <br>   <span class="hljs-attr">IPv6:</span> [] <br>   <span class="hljs-attr">Traffic:</span> <span class="hljs-string">received</span> <span class="hljs-number">99670</span> <span class="hljs-string">packets/87.7</span> <span class="hljs-string">MiB</span> <span class="hljs-string">(0</span> <span class="hljs-string">err);</span> <span class="hljs-string">transmitted</span> <span class="hljs-number">68049</span> <span class="hljs-string">packets/14.9</span> <span class="hljs-string">MiB</span> <span class="hljs-string">(0</span> <span class="hljs-string">err)</span> <br><span class="hljs-attr">Network parameters:</span><br> <span class="hljs-attr">Host name:</span> <span class="hljs-string">Sindrol-NTB</span><br> <span class="hljs-attr">Domain name:</span> <span class="hljs-string">Sindrol-NTB</span><br> <span class="hljs-attr">DNS servers:</span> [<span class="hljs-number">202.106</span><span class="hljs-number">.0</span><span class="hljs-number">.20</span>, <span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span>]<br> <span class="hljs-attr">IPv4 Gateway:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.254</span><br> <span class="hljs-attr">IPv6 Gateway: ::</span><br><span class="hljs-attr">Displays:</span><br> <span class="hljs-attr">Display 0:</span><br>  <span class="hljs-string">Manuf.</span> <span class="hljs-string">ID=BOE,</span> <span class="hljs-string">Product</span> <span class="hljs-string">ID=65d,</span> <span class="hljs-string">Digital,</span> <span class="hljs-string">Serial=00000000,</span> <span class="hljs-string">ManufDate=1/2015,</span> <span class="hljs-string">EDID</span> <span class="hljs-string">v1.4</span><br>  <span class="hljs-number">34</span> <span class="hljs-string">x</span> <span class="hljs-number">19</span> <span class="hljs-string">cm</span> <span class="hljs-string">(13.4</span> <span class="hljs-string">x</span> <span class="hljs-number">7.5</span> <span class="hljs-string">in)</span><br>  <span class="hljs-attr">Preferred Timing:</span> <span class="hljs-string">Clock</span> <span class="hljs-string">141MHz,</span> <span class="hljs-string">Active</span> <span class="hljs-string">Pixels</span> <span class="hljs-string">1920x1080</span> <br>  <span class="hljs-attr">Manufacturer Data:</span> <span class="hljs-number">000000000000000000000000000000000000</span><br>  <span class="hljs-attr">Unspecified Text:</span> <span class="hljs-string">BOE</span> <span class="hljs-string">HF</span><br>  <span class="hljs-attr">Unspecified Text:</span> <span class="hljs-string">NV156FHM-N42</span><br> <span class="hljs-attr">Display 1:</span><br>  <span class="hljs-string">Manuf.</span> <span class="hljs-string">ID=AOC,</span> <span class="hljs-string">Product</span> <span class="hljs-string">ID=2476,</span> <span class="hljs-string">Digital,</span> <span class="hljs-string">Serial=00000319,</span> <span class="hljs-string">ManufDate=5/2016,</span> <span class="hljs-string">EDID</span> <span class="hljs-string">v1.3</span><br>  <span class="hljs-number">52</span> <span class="hljs-string">x</span> <span class="hljs-number">29</span> <span class="hljs-string">cm</span> <span class="hljs-string">(20.5</span> <span class="hljs-string">x</span> <span class="hljs-number">11.4</span> <span class="hljs-string">in)</span><br>  <span class="hljs-attr">Preferred Timing:</span> <span class="hljs-string">Clock</span> <span class="hljs-string">148MHz,</span> <span class="hljs-string">Active</span> <span class="hljs-string">Pixels</span> <span class="hljs-string">1920x1080</span> <br>  <span class="hljs-attr">Range Limits:</span> <span class="hljs-string">Field</span> <span class="hljs-string">Rate</span> <span class="hljs-number">50</span><span class="hljs-number">-76</span> <span class="hljs-string">Hz</span> <span class="hljs-string">vertical,</span> <span class="hljs-number">30</span><span class="hljs-number">-83</span> <span class="hljs-string">Hz</span> <span class="hljs-string">horizontal,</span> <span class="hljs-attr">Max clock:</span> <span class="hljs-number">170</span> <span class="hljs-string">MHz</span><br>  <span class="hljs-attr">Monitor Name:</span> <span class="hljs-string">2476WM</span><br>  <span class="hljs-attr">Serial Number:</span> <span class="hljs-string">E71G5BA000793</span><br><span class="hljs-attr">USB Devices:</span><br> <span class="hljs-string">Intel(R)</span> <span class="hljs-string">USB</span> <span class="hljs-number">3.0</span> <span class="hljs-string">可扩展主机控制器</span> <span class="hljs-bullet">-</span> <span class="hljs-number">1.0</span> <span class="hljs-string">(Microsoft)</span> <span class="hljs-string">(通用</span> <span class="hljs-string">USB</span> <span class="hljs-string">xHCI</span> <span class="hljs-string">主机控制器)</span><br> <span class="hljs-string">|--</span> <span class="hljs-string">USB</span> <span class="hljs-string">根集线器(USB</span> <span class="hljs-number">3.0</span><span class="hljs-string">)</span> <span class="hljs-string">((标准</span> <span class="hljs-string">USB</span> <span class="hljs-string">集线器))</span><br>     <span class="hljs-string">|--</span> <span class="hljs-string">Apple</span> <span class="hljs-string">Mobile</span> <span class="hljs-string">Device</span> <span class="hljs-string">USB</span> <span class="hljs-string">Driver</span> <span class="hljs-string">(Apple,</span> <span class="hljs-string">Inc.)</span><br>         <span class="hljs-string">|--</span> <span class="hljs-string">Apple</span> <span class="hljs-string">iPhone</span> <span class="hljs-string">(Apple</span> <span class="hljs-string">Inc.)</span><br>     <span class="hljs-string">|--</span> <span class="hljs-string">USB</span> <span class="hljs-string">Composite</span> <span class="hljs-string">Device</span> <span class="hljs-string">((标准</span> <span class="hljs-string">USB</span> <span class="hljs-string">主控制器))</span><br>         <span class="hljs-string">|--</span> <span class="hljs-string">Lenovo</span> <span class="hljs-string">EasyCamera</span> <span class="hljs-string">(Bison)</span><br>     <span class="hljs-string">|--</span> <span class="hljs-string">USB</span> <span class="hljs-string">Composite</span> <span class="hljs-string">Device</span> <span class="hljs-string">((标准</span> <span class="hljs-string">USB</span> <span class="hljs-string">主控制器))</span><br>         <span class="hljs-string">|--</span> <span class="hljs-string">USB</span> <span class="hljs-string">输入设备</span> <span class="hljs-string">((标准系统设备))</span><br>             <span class="hljs-string">|--</span> <span class="hljs-string">HID</span> <span class="hljs-string">Keyboard</span> <span class="hljs-string">Device</span> <span class="hljs-string">((标准键盘))</span><br>         <span class="hljs-string">|--</span> <span class="hljs-string">USB</span> <span class="hljs-string">输入设备</span> <span class="hljs-string">((标准系统设备))</span><br>             <span class="hljs-string">|--</span> <span class="hljs-string">HID-compliant</span> <span class="hljs-string">mouse</span> <span class="hljs-string">(Microsoft)</span><br>             <span class="hljs-string">|--</span> <span class="hljs-string">符合</span> <span class="hljs-string">HID</span> <span class="hljs-string">标准的供应商定义设备</span> <span class="hljs-string">((标准系统设备))</span><br>             <span class="hljs-string">|--</span> <span class="hljs-string">符合</span> <span class="hljs-string">HID</span> <span class="hljs-string">标准的用户控制设备</span> <span class="hljs-string">(Microsoft)</span><br>             <span class="hljs-string">|--</span> <span class="hljs-string">符合</span> <span class="hljs-string">HID</span> <span class="hljs-string">标准的系统控制器</span> <span class="hljs-string">((标准系统设备))</span><br>         <span class="hljs-string">|--</span> <span class="hljs-string">USB</span> <span class="hljs-string">输入设备</span> <span class="hljs-string">((标准系统设备))</span><br>             <span class="hljs-string">|--</span> <span class="hljs-string">符合</span> <span class="hljs-string">HID</span> <span class="hljs-string">标准的供应商定义设备</span> <span class="hljs-string">((标准系统设备))</span><br>     <span class="hljs-string">|--</span> <span class="hljs-string">USB</span> <span class="hljs-string">输入设备</span> <span class="hljs-string">((标准系统设备))</span><br>         <span class="hljs-string">|--</span> <span class="hljs-string">HID-compliant</span> <span class="hljs-string">mouse</span> <span class="hljs-string">(Microsoft)</span><br>     <span class="hljs-string">|--</span> <span class="hljs-string">英特尔(R)</span> <span class="hljs-string">无线</span> <span class="hljs-string">Bluetooth(R)</span> <span class="hljs-string">(Intel</span> <span class="hljs-string">Corporation)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;一、引入jar包&quot;&gt;&lt;a href=&quot;#一、引入jar包&quot; class=&quot;headerlink&quot; title=&quot;一、引入jar包&quot;&gt;&lt;/a&gt;一、引入jar包&lt;/h5&gt;&lt;p&gt;　　本项目主要使用第开源jar包：&lt;a href=&quot;https://github.com/oshi/oshi&quot;&gt;https://github.com/oshi/oshi&lt;/a&gt;&lt;br&gt;  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;RELEASE&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/com.github.oshi/oshi-core --&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.oshi&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;oshi-core&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.5.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://ysocket-blog.pages.dev/tags/java/"/>
    
    <category term="oshi" scheme="http://ysocket-blog.pages.dev/tags/oshi/"/>
    
  </entry>
  
  <entry>
    <title>Cache-Aside pattern</title>
    <link href="http://ysocket-blog.pages.dev/2022/03/12/Cache-Aside-pattern/"/>
    <id>http://ysocket-blog.pages.dev/2022/03/12/Cache-Aside-pattern/</id>
    <published>2022-03-12T07:20:29.000Z</published>
    <updated>2022-03-19T14:11:39.785Z</updated>
    
    <content type="html"><![CDATA[<p>首先，先说一下。老外提出了一个缓存更新套路，名为《Cache-Aside pattern》。其中就指出</p><ul><li>失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li><li>命中：应用程序从cache中取数据，取到后返回。</li><li>更新：先把数据存到数据库中，成功后，再让缓存失效。</li></ul><span id="more"></span><p>另外，知名社交网站facebook也在论文《Scaling Memcache at Facebook》中提出，他们用的也是先更新数据库，再删缓存的策略。</p><p>这种情况不存在并发问题么？</p><p>不是的。假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生</p><ul><li>缓存刚好失效</li><li>请求A查询数据库，得一个旧值</li><li>请求B将新值写入数据库</li><li>请求B删除缓存</li><li>请求A将查到的旧值写入缓存<br>ok，如果发生上述情况，确实是会发生脏数据。</li></ul><p>然而，发生这种情况的概率又有多少呢？</p><p>发生上述情况有一个先天性条件，就是步骤（3）的写数据库操作比步骤（2）的读数据库操作耗时更短，才有可能使得步骤（4）先于步骤（5）。可是，大家想想，数据库的读操作的速度远快于写操作的（不然做读写分离干嘛，做读写分离的意义就是因为读操作比较快，耗资源少），因此步骤（3）耗时比步骤（2）更短，这一情形很难出现。</p><p>假设，有人非要抬杠，有强迫症，一定要解决怎么办？</p><h5 id="如何解决上述并发问题？"><a href="#如何解决上述并发问题？" class="headerlink" title="如何解决上述并发问题？"></a>如何解决上述并发问题？</h5><p>首先，给缓存设有效时间是一种方案。其次，采用策略（2）里给出的异步延时删除策略，保证读请求完成以后，再进行删除操作。</p><h5 id="还有其他造成不一致的原因么？"><a href="#还有其他造成不一致的原因么？" class="headerlink" title="还有其他造成不一致的原因么？"></a>还有其他造成不一致的原因么？</h5><p>有的，这也是缓存更新策略（2）和缓存更新策略（3）都存在的一个问题，如果删缓存失败了怎么办，那不是会有不一致的情况出现么。比如一个写数据请求，然后写入数据库了，删缓存失败了，这会就出现不一致的情况了。这也是缓存更新策略（2）里留下的最后一个疑问。</p><p>如何解决？</p><p>提供一个保障的重试机制即可，这里给出两套方案。</p><h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>如下图所示</p><p><img src="/images/pasted-1.png" alt="upload1"></p><p>流程如下所示</p><ul><li>更新数据库数据；</li><li>缓存因为种种问题删除失败</li><li>将需要删除的key发送至消息队列</li><li>自己消费消息，获得需要删除的key</li><li>继续重试删除操作，直到成功</li></ul><p>然而，该方案有一个缺点，对业务线代码造成大量的侵入。于是有了方案二，在方案二中，启动一个订阅程序去订阅数据库的binlog，获得需要操作的数据。在应用程序中，另起一段程序，获得这个订阅程序传来的信息，进行删除缓存操作。</p><h5 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h5><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>流程如下图所示：</p><p>更新数据库数据</p><ul><li>数据库会将操作信息写入binlog日志当中</li><li>订阅程序提取出所需要的数据以及key</li><li>另起一段非业务代码，获得该信息</li><li>尝试删除缓存操作，发现删除失败</li><li>将这些信息发送至消息队列</li><li>重新从消息队列中获得该数据，重试操作。</li></ul><p> <a href="https://www.cnblogs.com/xiaoxiao1120/p/15255541.html">https://www.cnblogs.com/xiaoxiao1120/p/15255541.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先，先说一下。老外提出了一个缓存更新套路，名为《Cache-Aside pattern》。其中就指出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。&lt;/li&gt;
&lt;li&gt;命中：应用程序从cache中取数据，取到后返回。&lt;/li&gt;
&lt;li&gt;更新：先把数据存到数据库中，成功后，再让缓存失效。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>安装docker</title>
    <link href="http://ysocket-blog.pages.dev/2022/02/19/install-docker-on-linux/"/>
    <id>http://ysocket-blog.pages.dev/2022/02/19/install-docker-on-linux/</id>
    <published>2022-02-19T06:59:00.000Z</published>
    <updated>2022-03-19T14:11:39.786Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ubuntu-14-04-16-04（使用-apt-get-进行安装）"><a href="#Ubuntu-14-04-16-04（使用-apt-get-进行安装）" class="headerlink" title="Ubuntu 14.04&#x2F;16.04（使用 apt-get 进行安装）"></a>Ubuntu 14.04&#x2F;16.04（使用 apt-get 进行安装）</h3><p>step 1: 安装必要的一些系统工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common<br></code></pre></td></tr></table></figure><span id="more"></span><p>step 2: 安装GPG证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><p>step 3: 写入软件源信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;<br></code></pre></td></tr></table></figure><p>step 4: 更新并安装Docker-CE</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get -y update<br>sudo apt-get -y install docker-ce<br></code></pre></td></tr></table></figure><p>安装指定版本的Docker-CE:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Step 1: 查找Docker-CE的版本:</span>  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt-cache madison docker-ce</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  docker-ce | 17.03.1~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  docker-ce | 17.03.0~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo apt-get -y install docker-ce=[VERSION]</span><br><br></code></pre></td></tr></table></figure><h3 id="CentOS-7（使用-yum-进行安装）"><a href="#CentOS-7（使用-yum-进行安装）" class="headerlink" title="CentOS 7（使用 yum 进行安装）"></a>CentOS 7（使用 yum 进行安装）</h3><p>step 1: 安装必要的一些系统工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><p>step 2: 添加软件源信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p>step 3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure><p>step 4: 更新并安装Docker-CE</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum makecache fast<br>sudo yum -y install docker-ce<br></code></pre></td></tr></table></figure><p>step 4: 开启Docker服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service docker start<br></code></pre></td></tr></table></figure><p>注意：<br>官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># vim /etc/yum.repos.d/docker-ce.repo</span><br><span class="hljs-comment">#   将[docker-ce-test]下方的enabled=0修改为enabled=1</span><br><span class="hljs-comment"># 安装指定版本的Docker-CE:</span><br><span class="hljs-attribute">step</span> <span class="hljs-number">1</span>: 查找Docker-CE的版本:<br><span class="hljs-comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="hljs-comment">#   Loading mirror speeds from cached hostfile</span><br><span class="hljs-comment">#   Loaded plugins: branch, fastestmirror, langpacks</span><br><span class="hljs-comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="hljs-comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span><br><span class="hljs-comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="hljs-comment">#   Available Packages</span><br><span class="hljs-attribute">step2</span>: 安装指定版本的Docker-CE: (VERSION例如上面的<span class="hljs-number">17</span>.<span class="hljs-number">03</span>.<span class="hljs-number">0</span>.ce.<span class="hljs-number">1</span>-<span class="hljs-number">1</span>.el7.centos)<br><span class="hljs-comment"># sudo yum -y install docker-ce-[VERSION]</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Ubuntu-14-04-16-04（使用-apt-get-进行安装）&quot;&gt;&lt;a href=&quot;#Ubuntu-14-04-16-04（使用-apt-get-进行安装）&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 14.04&amp;#x2F;16.04（使用 apt-get 进行安装）&quot;&gt;&lt;/a&gt;Ubuntu 14.04&amp;#x2F;16.04（使用 apt-get 进行安装）&lt;/h3&gt;&lt;p&gt;step 1: 安装必要的一些系统工具&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;sudo apt-get update&lt;br&gt;sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://ysocket-blog.pages.dev/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>mac下hostadmin修改host文件提示权限不足的问题</title>
    <link href="http://ysocket-blog.pages.dev/2022/02/09/mac-editor-etc-hosts/"/>
    <id>http://ysocket-blog.pages.dev/2022/02/09/mac-editor-etc-hosts/</id>
    <published>2022-02-09T08:59:00.000Z</published>
    <updated>2022-03-19T14:11:39.786Z</updated>
    
    <content type="html"><![CDATA[<p>修改文件写入权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod og+w /etc/hosts<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;修改文件写入权限&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code</summary>
      
    
    
    
    <category term="Mac" scheme="http://ysocket-blog.pages.dev/categories/Mac/"/>
    
    
    <category term="Mac" scheme="http://ysocket-blog.pages.dev/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>提高 GitHub 下载速度的方案</title>
    <link href="http://ysocket-blog.pages.dev/2022/02/08/download-file-from-github/"/>
    <id>http://ysocket-blog.pages.dev/2022/02/08/download-file-from-github/</id>
    <published>2022-02-08T07:54:00.000Z</published>
    <updated>2022-02-13T06:51:47.767Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 文件加速<br>利用 Cloudflare Workers 对 github release 、archive 以及项目文件进行加速，部署无需服务器且自带 CDN.</p><p><a href="https://gh.api.99988866.xyz/">https://gh.api.99988866.xyz</a></p><p><a href="https://g.ioiox.com/">https://g.ioiox.com</a></p><p>以上网站为演示站点，如无法打开可以查看开源项目：gh-proxy-GitHub (<a href="https://hunsh.net/archives/23/">https://hunsh.net/archives/23/</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub 文件加速&lt;br&gt;利用 Cloudflare Workers 对 github release 、archive 以及项目文件进行加速，部署无需服务器且自带 CDN.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gh.api.99988866.xyz/&quot;&gt;h</summary>
      
    
    
    
    <category term="github" scheme="http://ysocket-blog.pages.dev/categories/github/"/>
    
    
    <category term="github" scheme="http://ysocket-blog.pages.dev/tags/github/"/>
    
  </entry>
  
</feed>
